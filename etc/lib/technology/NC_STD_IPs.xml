<?xml version="1.0"?>
<technology>
  <library>
    <name>STD</name>
    <cell>
      <name>arg_utils</name>
      <circuit>
        <component_o id="arg_utils">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2023 Politecnico di Milano</copyright>
          <authors>Michele Fiorito &lt;michele.fiorito@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="arg_utils"/>
          <parameter name="BITSIZE_data">32</parameter>
          <NP_functionality LIBRARY="arg_utils BITSIZE_data" VERILOG_PROVIDED="
function automatic integer log2;
  input integer value;
  `ifdef _SIM_HAVE_CLOG2
    log2 = $clog2(value);
  `else
    automatic integer temp_value = value-1;
    for (log2=0; temp_value &gt; 0; log2=log2+1)
      temp_value = temp_value &gt;&gt; 1;
  `endif
endfunction
          
parameter BITSIZE_mem_bus = 1 &lt;&lt; log2(BITSIZE_data);

import &quot;DPI-C&quot; function void m_getarg(inout logic [127:0] data, input int unsigned index);
import &quot;DPI-C&quot; function void m_setarg(input logic [127:0] data, input int unsigned index);
import &quot;DPI-C&quot; function int unsigned m_getptrargsize(input int unsigned index);

function automatic [BITSIZE_data-1:0] getarg(input int unsigned index);
  automatic reg [127:0] data = 0;
  m_getarg(data, index);
  return data[BITSIZE_data-1:0];
endfunction

function automatic ptr_t getptrarg(input int unsigned index);
  automatic reg [127:0] data = 0;
  m_getarg(data, index);
  return data[$bits(ptr_t)-1:0];
endfunction

function automatic int unsigned getptrargsize(input int unsigned index);
  return m_getptrargsize(index);
endfunction

function automatic void setarg(input logic [BITSIZE_data-1:0] data, input int unsigned index);
  automatic reg [127:0] _data = 0;
  _data[BITSIZE_data-1:0] = data;
  m_setarg(_data, index);
endfunction"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>mem_utils</name>
      <circuit>
        <component_o id="mem_utils">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2023 Politecnico di Milano</copyright>
          <authors>Michele Fiorito &lt;michele.fiorito@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="mem_utils"/>
          <parameter name="BITSIZE_data">32</parameter>
          <NP_functionality LIBRARY="mem_utils BITSIZE_data" VERILOG_PROVIDED="
function automatic integer log2;
  input integer value;
  `ifdef _SIM_HAVE_CLOG2
    log2 = $clog2(value);
  `else
    automatic integer temp_value = value-1;
    for (log2=0; temp_value &gt; 0; log2=log2+1)
      temp_value = temp_value &gt;&gt; 1;
  `endif
endfunction
          
parameter BITSIZE_mem_bus = 1 &lt;&lt; log2(BITSIZE_data);

import &quot;DPI-C&quot; function void m_read8    (output logic    [7:0] data, input ptr_t addr);
import &quot;DPI-C&quot; function void m_read16   (output logic   [15:0] data, input ptr_t addr);
import &quot;DPI-C&quot; function void m_read32   (output logic   [31:0] data, input ptr_t addr);
import &quot;DPI-C&quot; function void m_read64   (output logic   [63:0] data, input ptr_t addr);
import &quot;DPI-C&quot; function void m_read128  (output logic  [127:0] data, input ptr_t addr);
import &quot;DPI-C&quot; function void m_read256  (output logic  [255:0] data, input ptr_t addr);
import &quot;DPI-C&quot; function void m_read512  (output logic  [511:0] data, input ptr_t addr);
import &quot;DPI-C&quot; function void m_read1024 (output logic [1023:0] data, input ptr_t addr);

import &quot;DPI-C&quot; function void m_write8    (input shortint unsigned size, input logic    [7:0] data, input ptr_t addr);
import &quot;DPI-C&quot; function void m_write16   (input shortint unsigned size, input logic   [15:0] data, input ptr_t addr);
import &quot;DPI-C&quot; function void m_write32   (input shortint unsigned size, input logic   [31:0] data, input ptr_t addr);
import &quot;DPI-C&quot; function void m_write64   (input shortint unsigned size, input logic   [63:0] data, input ptr_t addr);
import &quot;DPI-C&quot; function void m_write128  (input shortint unsigned size, input logic  [127:0] data, input ptr_t addr);
import &quot;DPI-C&quot; function void m_write256  (input shortint unsigned size, input logic  [255:0] data, input ptr_t addr);
import &quot;DPI-C&quot; function void m_write512  (input shortint unsigned size, input logic  [511:0] data, input ptr_t addr);
import &quot;DPI-C&quot; function void m_write1024 (input shortint unsigned size, input logic [1023:0] data, input ptr_t addr);

function automatic [BITSIZE_data-1:0] read(input ptr_t addr);
  automatic reg [1023:0] wtmp = 0;

  if(BITSIZE_mem_bus == 8)
  begin
    m_read8(wtmp[7:0], addr);
  end
  else if(BITSIZE_mem_bus == 16)
  begin
    m_read16(wtmp[15:0], addr);
  end
  else if(BITSIZE_mem_bus == 32)
  begin
    m_read32(wtmp[31:0], addr);
  end
  else if(BITSIZE_mem_bus == 64)
  begin
    m_read64(wtmp[63:0], addr);
  end
  else if(BITSIZE_mem_bus == 128)
  begin
    m_read128(wtmp[127:0], addr);
  end
  else if(BITSIZE_mem_bus == 256)
  begin
    m_read256(wtmp[255:0], addr);
  end
  else if(BITSIZE_mem_bus == 512)
  begin
    m_read512(wtmp[511:0], addr);
  end
  else if(BITSIZE_mem_bus == 1024)
  begin
    m_read1024(wtmp[1023:0], addr);
  end
  else
  begin
    $display(&quot;Unsupported memory bus size: %0d&quot;, BITSIZE_mem_bus);
    $finish;
  end
  return wtmp[BITSIZE_data-1:0];
endfunction

function automatic void write(
  input shortint size,
  input logic [BITSIZE_data-1:0] data,
  input ptr_t addr);
  automatic reg [BITSIZE_mem_bus-1:0] tmp = 0;
  
  tmp = data[BITSIZE_data-1:0];
  if(BITSIZE_mem_bus == 8)
    m_write8(size, tmp, addr);
  else if(BITSIZE_mem_bus == 16)
    m_write16(size, tmp, addr);
  else if(BITSIZE_mem_bus == 32)
    m_write32(size, tmp, addr);
  else if(BITSIZE_mem_bus == 64)
    m_write64(size, tmp, addr);
  else if(BITSIZE_mem_bus == 128)
    m_write128(size, tmp, addr);
  else if(BITSIZE_mem_bus == 256)
    m_write256(size, tmp, addr);
  else if(BITSIZE_mem_bus == 512)
    m_write512(size, tmp, addr);
  else if(BITSIZE_mem_bus == 1024)
    m_write1024(size, tmp, addr);
  else
  begin
    $display(&quot;Unsupported memory bus size: %0d&quot;, BITSIZE_mem_bus);
    $finish;
  end
endfunction"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>TestbenchDUT</name>
      <circuit>
        <component_o id="TestbenchDUT">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2023 Politecnico di Milano</copyright>
          <authors>Michele Fiorito &lt;michele.fiorito@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="TestbenchDUT"/>
          <NP_functionality IP_COMPONENT="join_signal,split_signal" VERILOG_GENERATOR="TestbenchDUTModuleGenerator"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>TestbenchFSM</name>
      <circuit>
        <component_o id="TestbenchFSM">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2023 Politecnico di Milano</copyright>
          <authors>Michele Fiorito &lt;michele.fiorito@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="TestbenchFSM"/>
          <parameter name="RESFILE">&quot;&quot;results.txt&quot;&quot;</parameter>
          <parameter name="RESET_ACTIVE">0</parameter>
          <parameter name="CLOCK_PERIOD">10.0</parameter>
          <parameter name="MAX_SIM_CYCLES">200000000</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="done_port" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="reset" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="start_port" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="TestbenchFSM RESFILE RESET_ACTIVE CLOCK_PERIOD MAX_SIM_CYCLES" VERILOG_PROVIDED="

import &quot;DPI-C&quot; function void m_init();
import &quot;DPI-C&quot; function int unsigned m_next(input int unsigned state);
import &quot;DPI-C&quot; function int m_fini();

enum bit[2:0] {
  SIM_READY = 1,
  COSIM_INIT,
  SIM_SETUP,
  SIM_RUNNING,
  SIM_END,
  COSIM_END,
  COSIM_ABORT
} mdpi_state;
reg [2:0] state, state_next, state_succ, state_succ_next;

reg rst, rst_next, start, start_next;
time over_time;

initial
begin
  // Open file results will be written
  automatic integer res_file;
  res_file = $fopen(RESFILE, &quot;w&quot;);
  if (res_file == 0)
  begin
    $display(&quot;ERROR - Error opening the res_file&quot;);
    $finish;// Terminate
  end
  $fwrite(res_file, &quot;&quot;);
  $fclose(res_file);
  
  state = SIM_READY;
  state_next = SIM_READY;
  state_succ = SIM_READY;
  state_succ_next = SIM_READY;
  rst = !RESET_ACTIVE;
  rst_next = !RESET_ACTIVE;
  start = 1&apos;b0;
  start_next = 1&apos;b0;
  over_time = 0;
  
  $display(&quot;Results file: %s&quot;, RESFILE);
  $display(&quot;Reset active: %0s&quot;, rst ? &quot;LOW&quot; : &quot;HIGH&quot;);

  m_init();
end

assign reset = rst;
assign start_port = start;

always @(posedge clock)
begin
  state &lt;= state_next;
  state_succ &lt;= state_succ_next;
  rst &lt;= rst_next;
  start &lt;= start_next;
  case(state_next)
  SIM_READY:
    begin
      automatic integer unsigned next_state = m_next(int&apos;(COSIM_INIT));
      $display(&quot;Sim: next state: %0d&quot;, next_state);
      state_succ &lt;= next_state[2:0];
    end
  SIM_SETUP:
    begin
      automatic time start_time = $time + CLOCK_PERIOD;
      automatic time start_cycle = $rtoi(start_time/CLOCK_PERIOD);
      automatic integer res_file;
      res_file = $fopen(RESFILE, &quot;a&quot;);
      $fwrite(res_file, &quot;%0d|&quot;, start_time);
      $fclose(res_file);
      $display(&quot;Sim: Argument setup\\nSim: Simulation started at cycle %0d&quot;, start_cycle);
      over_time &lt;= start_cycle + MAX_SIM_CYCLES;
    end
  SIM_RUNNING:
    begin
      automatic time curr_cycle = $rtoi($time/CLOCK_PERIOD);
      if(curr_cycle >= over_time)
      begin
        automatic integer res_file;
        res_file = $fopen(RESFILE, &quot;a&quot;);
        $fwrite(res_file, &quot;X&quot;);
        $fclose(res_file);
        $display(&quot;Sim: Simulation exceeds %0d cycles&quot;, MAX_SIM_CYCLES);
        $finish;
      end
    end
  SIM_END:
    begin
      automatic time curr_time = $time;
      automatic time curr_cycle = $rtoi(curr_time/CLOCK_PERIOD);
      automatic integer res_file;
      res_file = $fopen(RESFILE, &quot;a&quot;);
      $fwrite(res_file, &quot;%0d,&quot;, curr_time);
      $fclose(res_file);
      $display(&quot;Sim: DUT port writeback\\nSim: Simulation ended at cycle %0d&quot;, curr_cycle);
    end
  COSIM_END:
    begin
      automatic integer r = m_fini();
      automatic integer res_file;
      res_file = $fopen(RESFILE, &quot;a&quot;);
      if(r[2:0] == int&apos;(COSIM_ABORT))
      begin
        $fwrite(res_file, &quot;\\nA\\n&quot;);
        $display(&quot;Sim: Testbench aborted&quot;);
      end
      else
      begin
        $fwrite(res_file, &quot;\\n%0d\\n&quot;, r[15:8]);
        $display(&quot;Sim: Testbench returned: %0d&quot;, r[15:8]);
      end
      $fclose(res_file);
      $finish;
    end
  default:
    begin
    end
  endcase
end

always @(*)
begin
  rst_next = rst;
  start_next = start;
  state_next = state;
  state_succ_next = state_succ;
  case(state)
  SIM_READY:
    begin
      state_next = state_succ;
      if(state_next == int&apos;(SIM_SETUP))
      begin
        rst_next = RESET_ACTIVE;
      end
    end
  SIM_SETUP:
    begin
      state_next = SIM_RUNNING;
      rst_next = !RESET_ACTIVE;
      start_next = 1&apos;b1;
    end
  SIM_RUNNING:
    begin
      start_next = 1&apos;b0;
      if(done_port)
      begin
        state_next = SIM_END;
      end
    end
  SIM_END:
    begin
      // A clock cycle must pass to allow interface modules 
      // finalization operations before m_next(SIM_END) is called
      state_next = SIM_READY;
    end
  COSIM_END:
    begin
    end
  default:
    begin
      state_next = SIM_READY;
    end
  endcase
end"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>TestbenchMEM</name>
      <circuit>
        <component_o id="TestbenchMEM">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2023 Politecnico di Milano</copyright>
          <authors>Michele Fiorito &lt;michele.fiorito@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="TestbenchMEM"/>
          <parameter name="MEM_DELAY_READ">2</parameter>
          <parameter name="MEM_DELAY_WRITE">1</parameter>
          <parameter name="base_addr">1073741824</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="M_DataRdy" dir="OUT" is_memory="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1"/>
          </port_o>
          <port_o id="M_Rdata_ram" dir="OUT" is_memory="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Min_oe_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1"/>
          </port_o>
          <port_o id="Min_we_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1"/>
          </port_o>
          <port_o id="Min_addr_ram" dir="OUT" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Min_data_ram_size" dir="OUT" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Min_Wdata_ram" dir="OUT" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Mout_oe_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1"/>
          </port_o>
          <port_o id="Mout_we_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1"/>
          </port_o>
          <port_o id="Mout_addr_ram" dir="IN" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Mout_data_ram_size" dir="IN" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Mout_Wdata_ram" dir="IN" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <NP_functionality
            IP_COMPONENT="mem_utils"
            LIBRARY="TestbenchMEM MEM_DELAY_READ MEM_DELAY_WRITE base_addr M_DataRdy M_Rdata_ram Min_oe_ram Min_we_ram Min_addr_ram Min_data_ram_size Min_Wdata_ram Mout_oe_ram Mout_we_ram Mout_addr_ram Mout_data_ram_size Mout_Wdata_ram"
            VERILOG_PROVIDED="
parameter MEM_MAX_DELAY= MEM_DELAY_READ > MEM_DELAY_WRITE ? MEM_DELAY_READ : MEM_DELAY_WRITE,
  CHANNELS_NUMBER= BITSIZE_Mout_oe_ram,
  elm_BITSIZE_Mout_addr_ram= BITSIZE_Mout_addr_ram / CHANNELS_NUMBER,
  elm_BITSIZE_Mout_data_ram_size= BITSIZE_Mout_data_ram_size / CHANNELS_NUMBER,
  elm_BITSIZE_Mout_Wdata_ram= BITSIZE_Mout_Wdata_ram / CHANNELS_NUMBER,
  elm_BITSIZE_M_Rdata_ram= BITSIZE_M_Rdata_ram / CHANNELS_NUMBER;

reg [BITSIZE_Mout_Wdata_ram-1:0] mask;
reg [BITSIZE_M_Rdata_ram-1:0] M_Rdata_ram_temp;
reg [CHANNELS_NUMBER-1:0] M_DataRdy_temp;

reg [CHANNELS_NUMBER*MEM_DELAY_READ-1:0] Mout_oe_ram_queue_next;
reg [CHANNELS_NUMBER*MEM_DELAY_READ-1:0] Mout_oe_ram_queue_curr;
reg [CHANNELS_NUMBER*MEM_DELAY_WRITE-1:0] Mout_we_ram_queue_next;
reg [CHANNELS_NUMBER*MEM_DELAY_WRITE-1:0] Mout_we_ram_queue_curr;
reg [BITSIZE_Mout_addr_ram*MEM_MAX_DELAY-1:0] Mout_addr_ram_queue_next;
reg [BITSIZE_Mout_addr_ram*MEM_MAX_DELAY-1:0] Mout_addr_ram_queue_curr;
reg [BITSIZE_Mout_data_ram_size*MEM_MAX_DELAY-1:0] Mout_data_ram_size_queue_next;
reg [BITSIZE_Mout_data_ram_size*MEM_MAX_DELAY-1:0] Mout_data_ram_size_queue_curr;
reg [BITSIZE_Mout_Wdata_ram*MEM_DELAY_WRITE-1:0] Mout_Wdata_ram_queue_next;
reg [BITSIZE_Mout_Wdata_ram*MEM_DELAY_WRITE-1:0] Mout_Wdata_ram_queue_curr;

genvar i;

mem_utils #(elm_BITSIZE_M_Rdata_ram) m_utils();

initial
begin
  Mout_oe_ram_queue_next = 0;
  Mout_oe_ram_queue_curr = 0;
  Mout_we_ram_queue_next = 0;
  Mout_we_ram_queue_curr = 0;
  Mout_addr_ram_queue_next = 0;
  Mout_addr_ram_queue_curr = 0;
  Mout_Wdata_ram_queue_next = 0;
  Mout_Wdata_ram_queue_curr = 0;
  Mout_data_ram_size_queue_next = 0;
  Mout_data_ram_size_queue_curr = 0;
  M_DataRdy_temp = 0;
  M_Rdata_ram_temp = 0;
end

// Memory queue update
generate
  if(MEM_DELAY_READ != 1)
  begin
    always @(posedge clock)
    begin
      Mout_oe_ram_queue_next[CHANNELS_NUMBER*MEM_DELAY_READ-1:1] &lt;= 
        Mout_oe_ram_queue_curr[CHANNELS_NUMBER*(MEM_DELAY_READ-1)-1:0];
    end
    always @(*)
    begin
      Mout_oe_ram_queue_curr[CHANNELS_NUMBER*MEM_DELAY_READ-1:1] = 
        Mout_oe_ram_queue_next[CHANNELS_NUMBER*MEM_DELAY_READ-1:1];
      Mout_oe_ram_queue_curr[CHANNELS_NUMBER-1:0] = Mout_oe_ram;
    end
  end
  else
  begin
    always @(*)
    begin
      Mout_oe_ram_queue_curr[CHANNELS_NUMBER-1:0] = Mout_oe_ram;
    end
  end
endgenerate

generate
  if(MEM_DELAY_WRITE != 1)
  begin
    always @(posedge clock)
    begin
      Mout_we_ram_queue_next[CHANNELS_NUMBER*MEM_DELAY_WRITE-1:CHANNELS_NUMBER] &lt;= 
        Mout_we_ram_queue_curr[CHANNELS_NUMBER*(MEM_DELAY_WRITE-1)-1:0];
      Mout_Wdata_ram_queue_next[MEM_DELAY_WRITE*BITSIZE_Mout_Wdata_ram-1:BITSIZE_Mout_Wdata_ram] &lt;= 
        Mout_Wdata_ram_queue_curr[CHANNELS_NUMBER*(MEM_DELAY_WRITE-1)*BITSIZE_Mout_Wdata_ram-1:0];
    end
    always @(*)
    begin
      Mout_we_ram_queue_curr[CHANNELS_NUMBER*MEM_DELAY_WRITE-1:CHANNELS_NUMBER] = 
        Mout_we_ram_queue_next[CHANNELS_NUMBER*MEM_DELAY_WRITE-1:CHANNELS_NUMBER];
      Mout_we_ram_queue_curr[CHANNELS_NUMBER-1:0] = Mout_we_ram;
      Mout_Wdata_ram_queue_curr[MEM_DELAY_WRITE*BITSIZE_Mout_Wdata_ram-1:BITSIZE_Mout_Wdata_ram] = 
        Mout_Wdata_ram_queue_next[MEM_DELAY_WRITE*BITSIZE_Mout_Wdata_ram-1:BITSIZE_Mout_Wdata_ram];
      Mout_Wdata_ram_queue_curr[BITSIZE_Mout_Wdata_ram-1:0] = Mout_Wdata_ram;
    end
  end
  else
  begin
    always @(*)
    begin
      Mout_we_ram_queue_curr[CHANNELS_NUMBER-1:0] = Mout_we_ram;
      Mout_Wdata_ram_queue_curr[BITSIZE_Mout_Wdata_ram-1:0] = Mout_Wdata_ram;
    end
  end
endgenerate

generate
  if(MEM_MAX_DELAY != 1)
  begin
    always @(posedge clock)
    begin
      Mout_addr_ram_queue_next[MEM_MAX_DELAY*BITSIZE_Mout_addr_ram-1:BITSIZE_Mout_addr_ram] &lt;= 
        Mout_addr_ram_queue_curr[(MEM_MAX_DELAY-1)*BITSIZE_Mout_addr_ram-1:0];
      Mout_data_ram_size_queue_next[MEM_MAX_DELAY*BITSIZE_Mout_data_ram_size-1:BITSIZE_Mout_data_ram_size] &lt;= 
        Mout_data_ram_size_queue_curr[(MEM_MAX_DELAY-1)*BITSIZE_Mout_data_ram_size-1:0];
    end
    always @(*)
    begin
      Mout_addr_ram_queue_curr[MEM_MAX_DELAY*BITSIZE_Mout_addr_ram-1:BITSIZE_Mout_addr_ram] = 
        Mout_addr_ram_queue_next[MEM_MAX_DELAY*BITSIZE_Mout_addr_ram-1:BITSIZE_Mout_addr_ram];
      Mout_addr_ram_queue_curr[BITSIZE_Mout_addr_ram-1:0] = Mout_addr_ram;
      Mout_data_ram_size_queue_curr[MEM_MAX_DELAY*BITSIZE_Mout_data_ram_size-1:BITSIZE_Mout_data_ram_size] = 
        Mout_data_ram_size_queue_next[MEM_MAX_DELAY*BITSIZE_Mout_data_ram_size-1:BITSIZE_Mout_data_ram_size];
      Mout_data_ram_size_queue_curr[BITSIZE_Mout_data_ram_size-1:0] = Mout_data_ram_size;
    end
  end
  else
  begin
    always @(*)
    begin
      Mout_addr_ram_queue_curr[BITSIZE_Mout_addr_ram-1:0] = Mout_addr_ram;
      Mout_data_ram_size_queue_curr[BITSIZE_Mout_data_ram_size-1:0] = Mout_data_ram_size;
    end
  end
endgenerate

// OffChip Memory write
generate
  for(i = 0; i &lt; CHANNELS_NUMBER; i = i + 1)
  begin : memory_port
    always @(posedge clock)
    begin : write_channel
      automatic shortint unsigned size =
        Mout_data_ram_size_queue_curr[(elm_BITSIZE_Mout_data_ram_size*(i+1))-1+(MEM_DELAY_WRITE-1)*BITSIZE_Mout_data_ram_size:
                                      elm_BITSIZE_Mout_data_ram_size*i+(MEM_DELAY_WRITE-1)*BITSIZE_Mout_data_ram_size];
      automatic ptr_t addr = Mout_addr_ram_queue_curr[(elm_BITSIZE_Mout_addr_ram*(i+1))-1+(MEM_DELAY_WRITE-1)*BITSIZE_Mout_addr_ram:
                                                      elm_BITSIZE_Mout_addr_ram*i+(MEM_DELAY_WRITE-1)*BITSIZE_Mout_addr_ram];
      automatic reg [elm_BITSIZE_Mout_Wdata_ram-1:0] data =
        Mout_Wdata_ram_queue_curr[(elm_BITSIZE_Mout_Wdata_ram*(i+1))-1+(MEM_DELAY_WRITE-1)*BITSIZE_Mout_Wdata_ram:
                                   elm_BITSIZE_Mout_Wdata_ram*i+(MEM_DELAY_WRITE-1)*BITSIZE_Mout_Wdata_ram];
      if (Mout_we_ram_queue_curr[CHANNELS_NUMBER*(MEM_DELAY_WRITE-1)+i] === 1&apos;b1 
          &amp;&amp; base_addr &lt;= Mout_addr_ram_queue_curr[(elm_BITSIZE_Mout_addr_ram*(i+1))-1+(MEM_DELAY_WRITE-1)*BITSIZE_Mout_addr_ram:
                                                   elm_BITSIZE_Mout_addr_ram*i+(MEM_DELAY_WRITE-1)*BITSIZE_Mout_addr_ram])
      begin
        m_utils.write(size, data, addr);
      end
    end
    always @(*)
    begin : read_channel
      automatic ptr_t addr = Mout_addr_ram_queue_curr[(elm_BITSIZE_Mout_addr_ram*(i+1))-1+(MEM_DELAY_READ-1)*BITSIZE_Mout_addr_ram:
                                                      elm_BITSIZE_Mout_addr_ram*i+(MEM_DELAY_READ-1)*BITSIZE_Mout_addr_ram];
      automatic reg [elm_BITSIZE_M_Rdata_ram-1:0] data = 0;
      M_Rdata_ram_temp[(elm_BITSIZE_M_Rdata_ram*(i+1))-1:elm_BITSIZE_M_Rdata_ram*i] = 0;
      if(base_addr &lt;= Mout_addr_ram_queue_curr[(elm_BITSIZE_Mout_addr_ram*(i+1))-1+(MEM_DELAY_READ-1)*BITSIZE_Mout_addr_ram:
                                               elm_BITSIZE_Mout_addr_ram*i+(MEM_DELAY_READ-1)*BITSIZE_Mout_addr_ram])
      begin
        M_Rdata_ram_temp[(elm_BITSIZE_M_Rdata_ram*(i+1))-1:elm_BITSIZE_M_Rdata_ram*i] = m_utils.read(addr);
      end
    end
    always @(*)
    begin
      M_DataRdy_temp[i] = 0;
      if(Mout_we_ram_queue_curr[CHANNELS_NUMBER*(MEM_DELAY_WRITE-1) + i] === 1&apos;b1)
      begin
        M_DataRdy_temp[i] = 
          base_addr &lt;= Mout_addr_ram_queue_curr[(elm_BITSIZE_Mout_addr_ram*(i+1))-1+(MEM_DELAY_WRITE-1)*BITSIZE_Mout_addr_ram:
                                                elm_BITSIZE_Mout_addr_ram*i+(MEM_DELAY_WRITE-1)*BITSIZE_Mout_addr_ram];
      end
      else if(Mout_oe_ram_queue_curr[CHANNELS_NUMBER*(MEM_DELAY_READ-1) + i] === 1&apos;b1)
      begin
        M_DataRdy_temp[i] = 
          base_addr &lt;= Mout_addr_ram_queue_curr[(elm_BITSIZE_Mout_addr_ram*(i+1))-1+(MEM_DELAY_READ-1)*BITSIZE_Mout_addr_ram:
                                                elm_BITSIZE_Mout_addr_ram*i+(MEM_DELAY_READ-1)*BITSIZE_Mout_addr_ram];
      end
    end
  end
endgenerate
assign M_Rdata_ram = M_Rdata_ram_temp;
assign M_DataRdy = M_DataRdy_temp;

always @(posedge clock)
begin
  if ((Mout_we_ram &amp; Mout_oe_ram) != 0)
  begin
    $display(&quot;ERROR - Mout_we_ram and Mout_oe_ram both enabled&quot;);
    $finish;
  end
end"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>IF_PORT_IN</name>
      <circuit>
        <component_o id="IF_PORT_IN">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2023 Politecnico di Milano</copyright>
          <authors>Michele Fiorito &lt;michele.fiorito@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="IF_PORT_IN"/>
          <parameter name="index">0</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="val_port" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality IP_COMPONENT="arg_utils" LIBRARY="IF_PORT_IN index val_port" VERILOG_PROVIDED="arg_utils #(BITSIZE_val_port) m_utils();
reg [BITSIZE_val_port-1:0] val, val_next;
assign val_port = val;

initial
begin
  val = 0;
  val_next = 0;
end

always @(posedge clock) 
begin
  val &lt;= val_next;
  if(1RESET_VALUE)
  begin
    val &lt;= m_utils.getarg(index);
  end
end

always @(*)
begin
  val_next = val;
end"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>IF_PORT_OUT</name>
      <circuit>
        <component_o id="IF_PORT_OUT">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2023 Politecnico di Milano</copyright>
          <authors>Michele Fiorito &lt;michele.fiorito@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="IF_PORT_OUT"/>
          <parameter name="index">0</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="done_port" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="val_port" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality
            IP_COMPONENT="arg_utils"
            LIBRARY="IF_PORT_OUT index val_port"
            VERILOG_PROVIDED="arg_utils #(BITSIZE_val_port) m_utils();

always @(posedge clock)
begin
  if(done_port)
  begin
    m_utils.setarg(val_port, index);
  end
end"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>TestbenchArray</name>
      <circuit>
        <component_o id="TestbenchArray">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2023 Politecnico di Milano</copyright>
          <authors>Michele Fiorito &lt;michele.fiorito@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="TestbenchArray"/>
          <parameter name="index">0</parameter>
          <parameter name="WRITE_DELAY">1</parameter>
          <parameter name="READ_DELAY">2</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality IP_COMPONENT="arg_utils,mem_utils" LIBRARY="TestbenchArray index WRITE_DELAY READ_DELAY" VERILOG_GENERATOR="TestbenchArrayModuleGenerator"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>TestbenchAcknowledge</name>
      <circuit>
        <component_o id="TestbenchAcknowledge">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2023 Politecnico di Milano</copyright>
          <authors>Michele Fiorito &lt;michele.fiorito@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="TestbenchAcknowledge"/>
          <parameter name="index">0</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="done_port" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality IP_COMPONENT="arg_utils,mem_utils" LIBRARY="TestbenchAcknowledge index" VERILOG_GENERATOR="TestbenchAcknowledgeModuleGenerator"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>TestbenchValid</name>
      <circuit>
        <component_o id="TestbenchValid">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2023 Politecnico di Milano</copyright>
          <authors>Michele Fiorito &lt;michele.fiorito@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="TestbenchValid"/>
          <parameter name="index">0</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="done_port" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality IP_COMPONENT="arg_utils,mem_utils" LIBRARY="TestbenchValid index" VERILOG_GENERATOR="TestbenchValidModuleGenerator"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>TestbenchOvalid</name>
      <circuit>
        <component_o id="TestbenchOvalid">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2023 Politecnico di Milano</copyright>
          <authors>Michele Fiorito &lt;michele.fiorito@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="TestbenchOvalid"/>
          <parameter name="index">0</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="done_port" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality IP_COMPONENT="arg_utils,mem_utils" LIBRARY="TestbenchOvalid index" VERILOG_GENERATOR="TestbenchOvalidModuleGenerator"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>TestbenchHandshake</name>
      <circuit>
        <component_o id="TestbenchHandshake">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2023 Politecnico di Milano</copyright>
          <authors>Michele Fiorito &lt;michele.fiorito@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="TestbenchHandshake"/>
          <parameter name="index">0</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="done_port" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality IP_COMPONENT="arg_utils,mem_utils" LIBRARY="TestbenchHandshake index" VERILOG_GENERATOR="TestbenchHandshakeModuleGenerator"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>TestbenchAxis</name>
      <circuit>
        <component_o id="TestbenchAxis">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2023 Politecnico di Milano</copyright>
          <authors>Michele Fiorito &lt;michele.fiorito@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="TestbenchAxis"/>
          <parameter name="index">0</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="done_port" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality IP_COMPONENT="arg_utils,mem_utils" LIBRARY="TestbenchAxis index" VERILOG_GENERATOR="TestbenchAxisModuleGenerator"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>TestbenchFifo</name>
      <circuit>
        <component_o id="TestbenchFifo">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2023 Politecnico di Milano</copyright>
          <authors>Michele Fiorito &lt;michele.fiorito@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="TestbenchFifo"/>
          <parameter name="index">0</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="done_port" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality IP_COMPONENT="arg_utils,mem_utils" LIBRARY="TestbenchFifo index" VERILOG_GENERATOR="TestbenchFifoModuleGenerator"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>TestbenchNone</name>
      <circuit>
        <component_o id="TestbenchNone">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2023 Politecnico di Milano</copyright>
          <authors>Michele Fiorito &lt;michele.fiorito@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="TestbenchNone"/>
          <parameter name="index">0</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="done_port" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality IP_COMPONENT="arg_utils,mem_utils" LIBRARY="TestbenchNone index" VERILOG_GENERATOR="TestbenchNoneModuleGenerator"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>TestbenchNone_registered</name>
      <circuit>
        <component_o id="TestbenchNone_registered">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2023 Politecnico di Milano</copyright>
          <authors>Michele Fiorito &lt;michele.fiorito@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="TestbenchNone_registered"/>
          <parameter name="index">0</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="done_port" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality IP_COMPONENT="arg_utils,mem_utils" LIBRARY="TestbenchNone_registered index" VERILOG_GENERATOR="TestbenchNoneModuleGenerator"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>TestbenchMAXI</name>
      <circuit>
        <component_o id="TestbenchAXIM">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2023 Politecnico di Milano</copyright>
          <authors>Michele Fiorito &lt;michele.fiorito@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="TestbenchAXIM"/>
          <parameter name="index">0</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="done_port" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality IP_COMPONENT="arg_utils,mem_utils" LIBRARY="TestbenchAXIM index" VERILOG_GENERATOR="TestbenchAXIMModuleGenerator"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>constant_value</name>
      <attribute name="area" value_type="float64">0</attribute>
      <circuit>
        <component_o id="constant_value">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;, Christian Pilato &lt;christian.pilato@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="constant_value"/>
          <parameter name="value">&quot;0&quot;</parameter>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="constant_value out1 value" VHDL_PROVIDED="begin
 out1 &lt;= value;" VERILOG_PROVIDED="assign out1 = value;"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>entry_FU</name>
      <attribute name="area" value_type="float64">0</attribute>
      <operation operation_name="ENTRY"/>
      <component_timing_alias>ASSIGN_VECTOR_BOOL_FU</component_timing_alias>
    </cell>
    <cell>
      <name>gimple_goto_FU</name>
      <attribute name="area" value_type="float64">0</attribute>
      <operation operation_name="gimple_goto"/>
      <component_timing_alias>ASSIGN_VECTOR_BOOL_FU</component_timing_alias>
    </cell>
    <cell>
      <name>gimple_pragma_FU</name>
      <attribute name="area" value_type="float64">0</attribute>
      <operation operation_name="gimple_pragma"/>
      <component_timing_alias>ASSIGN_VECTOR_BOOL_FU</component_timing_alias>
    </cell>
    <cell>
      <name>gimple_phi_FU</name>
      <attribute name="area" value_type="float64">0</attribute>
      <operation operation_name="gimple_phi"/>
      <component_timing_alias>ASSIGN_VECTOR_BOOL_FU</component_timing_alias>
    </cell>
    <cell>
      <name>nop_FU</name>
      <attribute name="area" value_type="float64">0</attribute>
      <operation operation_name="NOP"/>
      <component_timing_alias>ASSIGN_VECTOR_BOOL_FU</component_timing_alias>
    </cell>
    <cell>
      <name>gimple_return_FU</name>
      <attribute name="area" value_type="float64">0</attribute>
      <operation operation_name="gimple_return"/>
      <component_timing_alias>ASSIGN_VECTOR_BOOL_FU</component_timing_alias>
    </cell>
    <cell>
      <name>gimple_label_FU</name>
      <attribute name="area" value_type="float64">0</attribute>
      <operation operation_name="gimple_label"/>
      <component_timing_alias>ASSIGN_VECTOR_BOOL_FU</component_timing_alias>
    </cell>
    <cell>
      <name>gimple_nop_FU</name>
      <attribute name="area" value_type="float64">0</attribute>
      <operation operation_name="gimple_nop"/>
      <component_timing_alias>ASSIGN_VECTOR_BOOL_FU</component_timing_alias>
    </cell>
    <cell>
      <name>gimple_asm_FU</name>
      <attribute name="area" value_type="float64">0</attribute>
      <operation operation_name="gimple_asm" bounded="0"/>
      <operation operation_name="__gimple_asm" bounded="0"/>
      <circuit>
        <component_o id="gimple_asm_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2015-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;, Marco Lattuada &lt;marco.lattuada@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="gimple_asm_FU"/>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="start_port" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="var_arg" dir="IN" is_var_args="1">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="sel_gimple_asm" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="sel___gimple_asm" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="done_port" dir="OUT">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="out1" VERILOG_GENERATOR="ASMModuleGenerator" VHDL_GENERATOR="ASMModuleGenerator"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>exit_FU</name>
      <attribute name="area" value_type="float64">0</attribute>
      <operation operation_name="EXIT"/>
      <component_timing_alias>ASSIGN_VECTOR_BOOL_FU</component_timing_alias>
    </cell>
    <cell>
      <name>switch_cond_FU</name>
      <attribute name="area" value_type="float64">0</attribute>
      <operation operation_name="SWITCH_COND" execution_time="0.0000001"/>
      <component_timing_alias>ASSIGN_VECTOR_BOOL_FU</component_timing_alias>
      <circuit>
        <component_o id="switch_cond_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="switch_cond_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="switch_cond_FU in1 out1" VHDL_PROVIDED="begin
  out1 &lt;= in1;" VERILOG_PROVIDED="assign out1 = in1;"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>read_cond_FU</name>
      <attribute name="area" value_type="float64">0</attribute>
      <operation operation_name="READ_COND" execution_time="0.0000001"/>
      <component_timing_alias>ASSIGN_VECTOR_BOOL_FU</component_timing_alias>
      <circuit>
        <component_o id="read_cond_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="read_cond_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <NP_functionality LIBRARY="read_cond_FU in1" VHDL_PROVIDED="constant zeroes : std_logic_vector(in1&apos;range) := (others =&gt; &apos;0&apos;); 
constant xs : std_logic_vector(in1&apos;range) := (others =&gt; &apos;X&apos;);
 begin out1 &lt;= &apos;X&apos; when in1 = xs else &apos;1&apos; when in1 /= zeroes else &apos;0&apos;;" VERILOG_PROVIDED="assign out1 = in1 != {BITSIZE_in1{1&apos;b0}};"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>multi_read_cond_FU</name>
      <attribute name="area" value_type="float64">0</attribute>
      <operation operation_name="MULTI_READ_COND" execution_time="0.0000001"/>
      <component_timing_alias>ASSIGN_VECTOR_BOOL_FU</component_timing_alias>
      <circuit>
        <component_o id="multi_read_cond_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="multi_read_cond_FU"/>
          <port_vector_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="multi_read_cond_FU in1 out1" VHDL_PROVIDED="begin
  out1 &lt;= in1;" VERILOG_PROVIDED="assign out1 = in1;"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>concat_1_1_FU</name>
      <operation operation_name="VECT_CONCATENATION_1_1" supported_types="INT:*" execution_time="0.0000001"/>
      <component_timing_alias>ASSIGN_VECTOR_BOOL_FU</component_timing_alias>
      <circuit>
        <component_o id="concat_1_1_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2016-2023 Politecnico di Milano</copyright>
          <authors>Marco Lattuada &lt;marco.lattuada@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="concat_1_1_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_INT" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="concat_1_1_FU in1 out1" VERILOG_PROVIDED="assign out1 = in1;" VHDL_PROVIDED="begin
  out1 &lt;= std_logic_vector(resize(in1,BITSIZE_out1));
"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ui_concat_1_1_FU</name>
      <operation operation_name="VECT_CONCATENATION_1_1" supported_types="UINT:*|VECTOR_BOOL:*|REAL:*" execution_time="0.0000001"/>
      <component_timing_alias>ASSIGN_VECTOR_BOOL_FU</component_timing_alias>
      <circuit>
        <component_o id="ui_concat_1_1_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2016-2023 Politecnico di Milano</copyright>
          <authors>Marco Lattuada &lt;marco.lattuada@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_concat_1_1_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_UINT" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="ui_concat_1_1_FU in1 out1" VERILOG_PROVIDED="assign out1 = in1;" VHDL_PROVIDED="begin
  out1 &lt;= std_logic_vector(resize(in1,BITSIZE_out1));
"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ui_concat_2_1_FU</name>
      <operation operation_name="VECT_CONCATENATION_2_1" supported_types="UINT:*|VECTOR_BOOL:*|REAL:*" execution_time="0.0000001"/>
      <component_timing_alias>ASSIGN_VECTOR_BOOL_FU</component_timing_alias>
      <circuit>
        <component_o id="ui_concat_2_1_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Marco Lattuada &lt;marco.lattuada@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_concat_2_1_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_UINT" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="ui_concat_2_1_FU in1 out1" VERILOG_PROVIDED="assign out1 = in1;" VHDL_PROVIDED="begin
  out1 &lt;= std_logic_vector(resize(in1, BITSIZE_out1));
"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>concat_2_2_FU</name>
      <operation operation_name="VECT_CONCATENATION_2_2" supported_types="INT:*" execution_time="0.0000001"/>
      <component_timing_alias>ASSIGN_VECTOR_BOOL_FU</component_timing_alias>
      <circuit>
        <component_o id="concat_2_2_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="concat_2_2_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_INT" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="concat_2_2_FU in1 in2 out1" VERILOG_PROVIDED="wire signed [BITSIZE_out1-1:0] tmp_in1;
wire signed [BITSIZE_out1-1:0] tmp_in2;
assign tmp_in1 = in1;
assign tmp_in2 = in2;
assign out1 = {tmp_in2, tmp_in1};" VHDL_PROVIDED="begin
  out1 &lt;= std_logic_vector(resize(in2, BITSIZE_out1)) &amp; std_logic_vector(resize(in1, BITSIZE_out1));
"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ui_concat_2_2_FU</name>
      <operation operation_name="VECT_CONCATENATION_2_2" supported_types="UINT:*|VECTOR_BOOL:*|REAL:*" execution_time="0.0000001"/>
      <component_timing_alias>ASSIGN_VECTOR_BOOL_FU</component_timing_alias>
      <circuit>
        <component_o id="ui_concat_2_2_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_concat_2_2_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_UINT" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="ui_concat_2_2_FU in1 in2 out1" VERILOG_PROVIDED="
wire [BITSIZE_out1-1:0] tmp_in1;
wire [BITSIZE_out1-1:0] tmp_in2;
assign tmp_in1 = in1;
assign tmp_in2 = in2;
assign out1 = {tmp_in2, tmp_in1};" VHDL_PROVIDED="
begin
  out1 &lt;= std_logic_vector(resize(in2, BITSIZE_out1)) &amp; std_logic_vector(resize(in1, BITSIZE_out1));"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>concat_3_3_FU</name>
      <operation operation_name="VECT_CONCATENATION_3_3" supported_types="INT:*" execution_time="0.0000001"/>
      <component_timing_alias>ASSIGN_VECTOR_BOOL_FU</component_timing_alias>
      <circuit>
        <component_o id="concat_3_3_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2016-2023 Politecnico di Milano</copyright>
          <authors>Marco Lattuada &lt;marco.lattuada@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="concat_3_3_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in3" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_INT" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="concat_3_3_FU in1 in2 in3 out1" VERILOG_PROVIDED="wire signed [BITSIZE_out1-1:0] tmp_in1;
wire signed [BITSIZE_out1-1:0] tmp_in2;
wire signed [BITSIZE_out1-1:0] tmp_in3;
assign tmp_in1 = in1;
assign tmp_in2 = in2;
assign tmp_in3 = in3;
assign out1 = {tmp_in3, tmp_in2, tmp_in1};"
            VHDL_PROVIDED="begin
  out1 &lt;= std_logic_vector(resize(in3, BITSIZE_out1)) &amp; std_logic_vector(resize(in2, BITSIZE_out1)) &amp; std_logic_vector(resize(in1, BITSIZE_out1));
"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ui_concat_3_3_FU</name>
      <operation operation_name="VECT_CONCATENATION_3_3" supported_types="UINT:*|VECTOR_BOOL:*|REAL:*" execution_time="0.0000001"/>
      <component_timing_alias>ASSIGN_VECTOR_BOOL_FU</component_timing_alias>
      <circuit>
        <component_o id="ui_concat_3_3_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2016-2023 Politecnico di Milano</copyright>
          <authors>Marco Lattuada &lt;marco.lattuada@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_concat_3_3_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in3" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_UINT" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="ui_concat_3_3_FU in1 in2 in3 out1" VERILOG_PROVIDED="
wire [BITSIZE_out1-1:0] tmp_in1;
wire [BITSIZE_out1-1:0] tmp_in2;
wire [BITSIZE_out1-1:0] tmp_in3;
assign tmp_in1 = in1;
assign tmp_in2 = in2;
assign tmp_in3 = in3;
assign out1 = {tmp_in3, tmp_in2, tmp_in1};
" VHDL_PROVIDED="begin
  out1 &lt;= std_logic_vector(resize(in3, BITSIZE_out1)) &amp; std_logic_vector(resize(in2, BITSIZE_out1)) &amp; std_logic_vector(resize(in1, BITSIZE_out1));
  "/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>concat_4_4_FU</name>
      <operation operation_name="VECT_CONCATENATION_4_4" supported_types="INT:*" execution_time="0.0000001"/>
      <component_timing_alias>ASSIGN_VECTOR_BOOL_FU</component_timing_alias>
      <circuit>
        <component_o id="concat_4_4_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="concat_4_4_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in3" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in4" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_INT" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="concat_4_4_FU in1 in2 in3 in4 out1" VERILOG_PROVIDED="
wire signed [BITSIZE_out1-1:0] tmp_in1;
wire signed [BITSIZE_out1-1:0] tmp_in2;
wire signed [BITSIZE_out1-1:0] tmp_in3;
wire signed [BITSIZE_out1-1:0] tmp_in4;
assign tmp_in1 = in1;
assign tmp_in2 = in2;
assign tmp_in3 = in3;
assign tmp_in4 = in4;
assign out1 = {tmp_in4, tmp_in3, tmp_in2, tmp_in1};" VHDL_PROVIDED="begin
  out1 &lt;= std_logic_vector(resize(in4, BITSIZE_out1)) &amp; std_logic_vector(resize(in3, BITSIZE_out1)) &amp; std_logic_vector(resize(in2, BITSIZE_out1)) &amp; std_logic_vector(resize(in1, BITSIZE_out1));"
          />
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ui_concat_4_4_FU</name>
      <operation operation_name="VECT_CONCATENATION_4_4" supported_types="UINT:*|VECTOR_BOOL:*|REAL:*" execution_time="0.0000001"/>
      <component_timing_alias>ASSIGN_VECTOR_BOOL_FU</component_timing_alias>
      <circuit>
        <component_o id="ui_concat_4_4_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_concat_4_4_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in3" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in4" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_UINT" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="ui_concat_4_4_FU in1 in2 in3 in4 out1" VERILOG_PROVIDED="
wire [BITSIZE_out1-1:0] tmp_in1;
wire [BITSIZE_out1-1:0] tmp_in2;
wire [BITSIZE_out1-1:0] tmp_in3;
wire [BITSIZE_out1-1:0] tmp_in4;
assign tmp_in1 = in1;
assign tmp_in2 = in2;
assign tmp_in3 = in3;
assign tmp_in4 = in4;
assign out1 = {tmp_in4, tmp_in3, tmp_in2, tmp_in1};" VHDL_PROVIDED="begin
  out1 &lt;= std_logic_vector(resize(in4, BITSIZE_out1)) &amp; std_logic_vector(resize(in3, BITSIZE_out1)) &amp; std_logic_vector(resize(in2, BITSIZE_out1)) &amp; std_logic_vector(resize(in1, BITSIZE_out1));"
          />
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>concat_4_1_FU</name>
      <operation operation_name="VECT_CONCATENATION_4_1" supported_types="INT:*" execution_time="0.0000001"/>
      <component_timing_alias>ASSIGN_VECTOR_BOOL_FU</component_timing_alias>
      <circuit>
        <component_o id="concat_4_1_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="concat_4_1_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_INT" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="concat_4_1_FU in1 out1" VERILOG_PROVIDED="assign out1 = in1;" VHDL_PROVIDED="begin
  out1 &lt;= std_logic_vector(resize(in1, BITSIZE_out1));
"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ui_concat_4_1_FU</name>
      <operation operation_name="VECT_CONCATENATION_4_1" supported_types="UINT:*|VECTOR_BOOL:*|REAL:*" execution_time="0.0000001"/>
      <component_timing_alias>ASSIGN_VECTOR_BOOL_FU</component_timing_alias>
      <circuit>
        <component_o id="ui_concat_4_1_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_concat_4_1_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_UINT" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="ui_concat_4_1_FU in1 out1" VERILOG_PROVIDED="assign out1 = in1;" VHDL_PROVIDED="begin
  out1 &lt;= std_logic_vector(resize(in1, BITSIZE_out1));
"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>concat_4_2_FU</name>
      <operation operation_name="VECT_CONCATENATION_4_2" supported_types="INT:*" execution_time="0.0000001"/>
      <component_timing_alias>ASSIGN_VECTOR_BOOL_FU</component_timing_alias>
      <circuit>
        <component_o id="concat_4_2_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="concat_4_2_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_INT" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="concat_4_2_FU in1 in2 out1" VERILOG_PROVIDED="
wire signed [BITSIZE_out1-1:0] tmp_in1;
wire signed [BITSIZE_out1-1:0] tmp_in2;
assign tmp_in1 = in1;
assign tmp_in2 = in2;
assign out1 = {tmp_in2, tmp_in1};" VHDL_PROVIDED="begin
   out1 &lt;= std_logic_vector(resize(in2, BITSIZE_out1)) &amp; std_logic_vector(resize(in3, BITSIZE_out1));"
          />
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ui_concat_4_2_FU</name>
      <operation operation_name="VECT_CONCATENATION_4_2" supported_types="UINT:*|VECTOR_BOOL:*|REAL:*" execution_time="0.0000001"/>
      <component_timing_alias>ASSIGN_VECTOR_BOOL_FU</component_timing_alias>
      <circuit>
        <component_o id="ui_concat_4_2_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_concat_4_2_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_UINT" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="ui_concat_4_2_FU in1 in2 out1" VERILOG_PROVIDED="
wire signed [BITSIZE_out1-1:0] tmp_in1;
wire signed [BITSIZE_out1-1:0] tmp_in2;
assign tmp_in1 = in1;
assign tmp_in2 = in2;
assign out1 = {tmp_in2, tmp_in1};" VHDL_PROVIDED="begin
   out1 &lt;= std_logic_vector(resize(in2, BITSIZE_out1)) &amp; std_logic_vector(resize(in3, BITSIZE_out1));"
          />
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ui_concat_6_3_FU</name>
      <operation operation_name="VECT_CONCATENATION_6_3" supported_types="UINT:*|VECTOR_BOOL:*|REAL:*" execution_time="0.0000001"/>
      <component_timing_alias>ASSIGN_VECTOR_BOOL_FU</component_timing_alias>
      <circuit>
        <component_o id="ui_concat_6_3_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2016-2023 Politecnico di Milano</copyright>
          <authors>Marco Lattuada &lt;marco.lattuada@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_concat_6_3_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in3" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_UINT" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="ui_concat_6_3_FU in1 in2 in3 out1" VERILOG_PROVIDED="
wire [BITSIZE_out1-1:0] tmp_in1;
wire [BITSIZE_out1-1:0] tmp_in2;
wire [BITSIZE_out1-1:0] tmp_in3;
assign tmp_in1 = in1;
assign tmp_in2 = in2;
assign tmp_in3 = in3;
assign out1 = {tmp_in3, tmp_in2, tmp_in1};"
            VHDL_PROVIDED="begin
  out1 &lt;= std_logic_vector(resize(in3, BITSIZE_out1)) &amp; std_logic_vector(resize(in2, BITSIZE_out1)) &amp; std_logic_vector(resize(in1, BITSIZE_out1));
"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>concat_8_1_FU</name>
      <operation operation_name="VECT_CONCATENATION_8_1" supported_types="INT:*" execution_time="0.0000001"/>
      <component_timing_alias>ASSIGN_VECTOR_BOOL_FU</component_timing_alias>
      <circuit>
        <component_o id="concat_8_1_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2016-2023 Politecnico di Milano</copyright>
          <authors>Marco Lattuada &lt;marco.lattuada@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="concat_8_1_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_UINT" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="concat_8_1_FU in1 out1" VERILOG_PROVIDED="assign out1 = in1;" VHDL_PROVIDED="begin
  out1 &lt;= std_logic_vector(resize(in1, BITSIZE_out1));
"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ui_concat_8_1_FU</name>
      <operation operation_name="VECT_CONCATENATION_8_1" supported_types="UINT:*|VECTOR_BOOL:*|REAL:*" execution_time="0.0000001"/>
      <component_timing_alias>ASSIGN_VECTOR_BOOL_FU</component_timing_alias>
      <circuit>
        <component_o id="ui_concat_8_1_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2016-2023 Politecnico di Milano</copyright>
          <authors>Marco Lattuada &lt;marco.lattuada@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_concat_8_1_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_UINT" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="ui_concat_8_1_FU in1 out1" VERILOG_PROVIDED="assign out1 = in1;" VHDL_PROVIDED="begin
  out1 &lt;= std_logic_vector(resize(in1, BITSIZE_out1));
"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>concat_8_2_FU</name>
      <operation operation_name="VECT_CONCATENATION_8_2" supported_types="INT:*" execution_time="0.0000001"/>
      <component_timing_alias>ASSIGN_VECTOR_BOOL_FU</component_timing_alias>
      <circuit>
        <component_o id="concat_8_2_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Marco Lattuada &lt;marco.lattuada@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="concat_8_2_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_INT" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="concat_8_2_FU in1 in2 out1" VERILOG_PROVIDED="
wire signed [BITSIZE_out1-1:0] tmp_in1;
wire signed [BITSIZE_out1-1:0] tmp_in2;
assign tmp_in1 = in1;
assign tmp_in2 = in2;
assign out1 = {tmp_in2, tmp_in1};" VHDL_PROVIDED="begin
  out1 &lt;= std_logic_vector(resize(in2, BITSIZE_out1)) &amp; std_logic_vector(resize(in1, BITSIZE_out1));
"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ui_concat_8_2_FU</name>
      <operation operation_name="VECT_CONCATENATION_8_2" supported_types="UINT:*|VECTOR_BOOL:*|REAL:*" execution_time="0.0000001"/>
      <component_timing_alias>ASSIGN_VECTOR_BOOL_FU</component_timing_alias>
      <circuit>
        <component_o id="ui_concat_8_2_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Marco Lattuada &lt;marco.lattuada@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_concat_8_2_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_UINT" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="ui_concat_8_2_FU in1 in2 out1" VERILOG_PROVIDED="
wire signed [BITSIZE_out1-1:0] tmp_in1;
wire signed [BITSIZE_out1-1:0] tmp_in2;
assign tmp_in1 = in1;
assign tmp_in2 = in2;
assign out1 = {tmp_in2, tmp_in1};" VHDL_PROVIDED="begin
  out1 &lt;= std_logic_vector(resize(in2, BITSIZE_out1)) &amp; std_logic_vector(resize(in1, BITSIZE_out1));
"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>concat_8_4_FU</name>
      <operation operation_name="VECT_CONCATENATION_8_4" supported_types="INT:*" execution_time="0.0000001"/>
      <component_timing_alias>ASSIGN_VECTOR_BOOL_FU</component_timing_alias>
      <circuit>
        <component_o id="concat_8_4_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="concat_8_4_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in3" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in4" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_INT" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="concat_8_4_FU in1 in2 in3 in4 out1" VERILOG_PROVIDED="
wire signed [BITSIZE_out1-1:0] tmp_in1;
wire signed [BITSIZE_out1-1:0] tmp_in2;
wire signed [BITSIZE_out1-1:0] tmp_in3;
wire signed [BITSIZE_out1-1:0] tmp_in4;
assign tmp_in1 = in1;
assign tmp_in2 = in2;
assign tmp_in3 = in3;
assign tmp_in4 = in4;
assign out1 = {tmp_in4, tmp_in3, tmp_in2, tmp_in1};" VHDL_PROVIDED="begin
  out1 &lt;= std_logic_vector(resize(in4, BITSIZE_out1)) &amp; std_logic_vector(resize(in3, BITSIZE_out1)) &amp; std_logic_vector(resize(in2, BITSIZE_out1)) &amp; std_logic_vector(resize(in1, BITSIZE_out1));"
          />
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ui_concat_8_4_FU</name>
      <operation operation_name="VECT_CONCATENATION_8_4" supported_types="UINT:*|VECTOR_BOOL:*|REAL:*" execution_time="0.0000001"/>
      <component_timing_alias>ASSIGN_VECTOR_BOOL_FU</component_timing_alias>
      <circuit>
        <component_o id="ui_concat_8_4_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_concat_8_4_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in3" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in4" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_UINT" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="ui_concat_8_4_FU in1 in2 in3 in4 out1" VERILOG_PROVIDED="
wire [BITSIZE_out1-1:0] tmp_in1;
wire [BITSIZE_out1-1:0] tmp_in2;
wire [BITSIZE_out1-1:0] tmp_in3;
wire [BITSIZE_out1-1:0] tmp_in4;
assign tmp_in1 = in1;
assign tmp_in2 = in2;
assign tmp_in3 = in3;
assign tmp_in4 = in4;
assign out1 = {tmp_in4, tmp_in3, tmp_in2, tmp_in1};" VHDL_PROVIDED="begin
  out1 &lt;= std_logic_vector(resize(in4, BITSIZE_out1)) &amp; std_logic_vector(resize(in3, BITSIZE_out1)) &amp; std_logic_vector(resize(in2, BITSIZE_out1)) &amp; std_logic_vector(resize(in1, BITSIZE_out1));"
          />
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>concat_8_8_FU</name>
      <operation operation_name="VECT_CONCATENATION_8_8" supported_types="INT:*" execution_time="0.0000001"/>
      <component_timing_alias>ASSIGN_VECTOR_BOOL_FU</component_timing_alias>
      <circuit>
        <component_o id="concat_8_8_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="concat_8_8_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in3" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in4" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in5" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in6" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in7" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in8" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_INT" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="concat_8_8_FU in1 in2 in3 in4 in5 in6 in7 in8 out1" VERILOG_PROVIDED="
wire signed [BITSIZE_out1-1:0] tmp_in1;
wire signed [BITSIZE_out1-1:0] tmp_in2;
wire signed [BITSIZE_out1-1:0] tmp_in3;
wire signed [BITSIZE_out1-1:0] tmp_in4;
wire signed [BITSIZE_out1-1:0] tmp_in5;
wire signed [BITSIZE_out1-1:0] tmp_in6;
wire signed [BITSIZE_out1-1:0] tmp_in7;
wire signed [BITSIZE_out1-1:0] tmp_in8;
assign tmp_in1 = in1;
assign tmp_in2 = in2;
assign tmp_in3 = in3;
assign tmp_in4 = in4;
assign tmp_in5 = in5;
assign tmp_in6 = in6;
assign tmp_in7 = in7;
assign tmp_in8 = in8;
assign out1 = {tmp_in8, tmp_in7, tmp_in6, tmp_in5, tmp_in4, tmp_in3, tmp_in2, tmp_in1};" VHDL_PROVIDED="
begin
  out1 &lt;= std_logic_vector(resize(in8, BITSIZE_out1)) &amp; std_logic_vector(resize(in7, BITSIZE_out1)) &amp; std_logic_vector(resize(in6, BITSIZE_out1)) &amp; std_logic_vector(resize(in5, BITSIZE_out1)) &amp; std_logic_vector(resize(in4, BITSIZE_out1)) &amp; std_logic_vector(resize(in3, BITSIZE_out1)) &amp; std_logic_vector(resize(in2, BITSIZE_out1)) &amp; std_logic_vector(resize(in1, BITSIZE_out1));
"
          />
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ui_concat_8_8_FU</name>
      <operation operation_name="VECT_CONCATENATION_8_8" supported_types="UINT:*|VECTOR_BOOL:*|REAL:*" execution_time="0.0000001"/>
      <component_timing_alias>ASSIGN_VECTOR_BOOL_FU</component_timing_alias>
      <circuit>
        <component_o id="ui_concat_8_8_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_concat_8_8_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in3" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in4" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in5" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in6" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in7" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in8" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_UINT" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="ui_concat_8_8_FU in1 in2 in3 in4 in5 in6 in7 in8 out1" VERILOG_PROVIDED="
wire [BITSIZE_out1-1:0] tmp_in1;
wire [BITSIZE_out1-1:0] tmp_in2;
wire [BITSIZE_out1-1:0] tmp_in3;
wire [BITSIZE_out1-1:0] tmp_in4;
wire [BITSIZE_out1-1:0] tmp_in5;
wire [BITSIZE_out1-1:0] tmp_in6;
wire [BITSIZE_out1-1:0] tmp_in7;
wire [BITSIZE_out1-1:0] tmp_in8;
assign tmp_in1 = in1;
assign tmp_in2 = in2;
assign tmp_in3 = in3;
assign tmp_in4 = in4;
assign tmp_in5 = in5;
assign tmp_in6 = in6;
assign tmp_in7 = in7;
assign tmp_in8 = in8;
assign out1 = {tmp_in8, tmp_in7, tmp_in6, tmp_in5, tmp_in4, tmp_in3, tmp_in2, tmp_in1};" VHDL_PROVIDED="
begin
   out1 &lt;= std_logic_vector(resize(in8, BITSIZE_out1)) &amp; std_logic_vector(resize(in7, BITSIZE_out1)) &amp; std_logic_vector(resize(in6, BITSIZE_out1)) &amp; std_logic_vector(resize(in5, BITSIZE_out1)) &amp; std_logic_vector(resize(in4, BITSIZE_out1)) &amp; std_logic_vector(resize(in3, BITSIZE_out1)) &amp; std_logic_vector(resize(in2, BITSIZE_out1)) &amp; std_logic_vector(resize(in1, BITSIZE_out1));
"
          />
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>concat_16_16_FU</name>
      <operation operation_name="VECT_CONCATENATION_16_16" supported_types="INT:*" execution_time="0.0000001"/>
      <component_timing_alias>ASSIGN_VECTOR_BOOL_FU</component_timing_alias>
      <circuit>
        <component_o id="concat_16_16_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="concat_16_16_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in3" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in4" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in5" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in6" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in7" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in8" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in9" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in10" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in11" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in12" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in13" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in14" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in15" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in16" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_INT" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="concat_16_16_FU in1 in2 in3 in4 in5 in6 in7 in8 in9 in10 in11 in12 in13 in14 in15 in16 out1" VERILOG_PROVIDED="
wire signed [BITSIZE_out1-1:0] tmp_in1;
wire signed [BITSIZE_out1-1:0] tmp_in2;
wire signed [BITSIZE_out1-1:0] tmp_in3;
wire signed [BITSIZE_out1-1:0] tmp_in4;
wire signed [BITSIZE_out1-1:0] tmp_in5;
wire signed [BITSIZE_out1-1:0] tmp_in6;
wire signed [BITSIZE_out1-1:0] tmp_in7;
wire signed [BITSIZE_out1-1:0] tmp_in8;
wire signed [BITSIZE_out1-1:0] tmp_in9;
wire signed [BITSIZE_out1-1:0] tmp_in10;
wire signed [BITSIZE_out1-1:0] tmp_in11;
wire signed [BITSIZE_out1-1:0] tmp_in12;
wire signed [BITSIZE_out1-1:0] tmp_in13;
wire signed [BITSIZE_out1-1:0] tmp_in14;
wire signed [BITSIZE_out1-1:0] tmp_in15;
wire signed [BITSIZE_out1-1:0] tmp_in16;
assign tmp_in1 = in1;
assign tmp_in2 = in2;
assign tmp_in3 = in3;
assign tmp_in4 = in4;
assign tmp_in5 = in5;
assign tmp_in6 = in6;
assign tmp_in7 = in7;
assign tmp_in8 = in8;
assign tmp_in9 = in9;
assign tmp_in10 = in10;
assign tmp_in11 = in11;
assign tmp_in12 = in12;
assign tmp_in13 = in13;
assign tmp_in14 = in14;
assign tmp_in15 = in15;
assign tmp_in16 = in16;
assign out1 = {tmp_in16, tmp_in15, tmp_in14, tmp_in13, tmp_in12, tmp_in11, tmp_in10, tmp_in9, tmp_in8, tmp_in7, tmp_in6, tmp_in5, tmp_in4, tmp_in3, tmp_in2, tmp_in1};" VHDL_PROVIDED="
begin
  out1 &lt;= std_logic_vector(in1) &amp; std_logic_vector(in2) &amp; std_logic_vector(in3) &amp; std_logic_vector(in4) &amp; std_logic_vector(in5) &amp; std_logic_vector(in6) &amp; std_logic_vector(in7) &amp; std_logic_vector(in8) &amp; std_logic_vector(in9) &amp; std_logic_vector(in10) &amp; std_logic_vector(in11) &amp; std_logic_vector(in12) &amp; std_logic_vector(in13) &amp; std_logic_vector(in14) &amp; std_logic_vector(in15) &amp; std_logic_vector(in16);
"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ui_concat_16_16_FU</name>
      <operation operation_name="VECT_CONCATENATION_16_16" supported_types="UINT:*|VECTOR_BOOL:*|REAL:*" execution_time="0.0000001"/>
      <component_timing_alias>ASSIGN_VECTOR_BOOL_FU</component_timing_alias>
      <circuit>
        <component_o id="ui_concat_16_16_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_concat_16_16_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in3" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in4" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in5" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in6" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in7" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in8" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in9" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in10" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in11" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in12" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in13" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in14" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in15" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in16" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_UINT" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="ui_concat_16_16_FU in1 in2 in3 in4 in5 in6 in7 in8 in9 in10 in11 in12 in13 in14 in15 in16 out1" VERILOG_PROVIDED="
wire [BITSIZE_out1-1:0] tmp_in1;
wire [BITSIZE_out1-1:0] tmp_in2;
wire [BITSIZE_out1-1:0] tmp_in3;
wire [BITSIZE_out1-1:0] tmp_in4;
wire [BITSIZE_out1-1:0] tmp_in5;
wire [BITSIZE_out1-1:0] tmp_in6;
wire [BITSIZE_out1-1:0] tmp_in7;
wire [BITSIZE_out1-1:0] tmp_in8;
wire [BITSIZE_out1-1:0] tmp_in9;
wire [BITSIZE_out1-1:0] tmp_in10;
wire [BITSIZE_out1-1:0] tmp_in11;
wire [BITSIZE_out1-1:0] tmp_in12;
wire [BITSIZE_out1-1:0] tmp_in13;
wire [BITSIZE_out1-1:0] tmp_in14;
wire [BITSIZE_out1-1:0] tmp_in15;
wire [BITSIZE_out1-1:0] tmp_in16;
assign tmp_in1 = in1;
assign tmp_in2 = in2;
assign tmp_in3 = in3;
assign tmp_in4 = in4;
assign tmp_in5 = in5;
assign tmp_in6 = in6;
assign tmp_in7 = in7;
assign tmp_in8 = in8;
assign tmp_in9 = in9;
assign tmp_in10 = in10;
assign tmp_in11 = in11;
assign tmp_in12 = in12;
assign tmp_in13 = in13;
assign tmp_in14 = in14;
assign tmp_in15 = in15;
assign tmp_in16 = in16;
assign out1 = {tmp_in16, tmp_in15, tmp_in14, tmp_in13, tmp_in12, tmp_in11, tmp_in10, tmp_in9, tmp_in8, tmp_in7, tmp_in6, tmp_in5, tmp_in4, tmp_in3, tmp_in2, tmp_in1};" VHDL_PROVIDED="
begin
  out1 &lt;= std_logic_vector(in1) &amp; std_logic_vector(in2) &amp; std_logic_vector(in3) &amp; std_logic_vector(in4) &amp; std_logic_vector(in5) &amp; std_logic_vector(in     6) &amp; std_logic_vector(in7) &amp; std_logic_vector(in8) &amp; std_logic_vector(in9) &amp; std_logic_vector(in10) &amp; std_logic_vector(in11) &amp; std_logic_vector(in12) &amp; std_logic_vector(in13) &amp; std_logic_vector(in14) &amp; std_logic_vector(in15) &amp; std_logic_vector(in16);
"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>concat_16_8_FU</name>
      <operation operation_name="VECT_CONCATENATION_16_8" supported_types="INT:*" execution_time="0.0000001"/>
      <component_timing_alias>ASSIGN_VECTOR_BOOL_FU</component_timing_alias>
      <circuit>
        <component_o id="concat_16_8_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="concat_16_8_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in3" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in4" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in5" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in6" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in7" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in8" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_INT" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="concat_16_8_FU in1 in2 in3 in4 in5 in6 in7 in8 out1" VERILOG_PROVIDED="
wire signed [BITSIZE_out1-1:0] tmp_in1;
wire signed [BITSIZE_out1-1:0] tmp_in2;
wire signed [BITSIZE_out1-1:0] tmp_in3;
wire signed [BITSIZE_out1-1:0] tmp_in4;
wire signed [BITSIZE_out1-1:0] tmp_in5;
wire signed [BITSIZE_out1-1:0] tmp_in6;
wire signed [BITSIZE_out1-1:0] tmp_in7;
wire signed [BITSIZE_out1-1:0] tmp_in8;
assign tmp_in1 = in1;
assign tmp_in2 = in2;
assign tmp_in3 = in3;
assign tmp_in4 = in4;
assign tmp_in5 = in5;
assign tmp_in6 = in6;
assign tmp_in7 = in7;
assign tmp_in8 = in8;
assign out1 = {tmp_in8, tmp_in7, tmp_in6, tmp_in5, tmp_in4, tmp_in3, tmp_in2, tmp_in1};" VHDL_PROVIDED="begin
   out1 &lt;= std_logic_vector(resize(in8, BITSIZE_out1)) &amp; std_logic_vector(resize(in7, BITSIZE_out1)) &amp; std_logic_vector(resize(in6, BITSIZE_out1)) &amp; std_logic_vector(resize(in5, BITSIZE_out1)) &amp; std_logic_vector(resize(in4, BITSIZE_out1)) &amp; std_logic_vector(resize(in3, BITSIZE_out1)) &amp; std_logic_vector(resize(in2, BITSIZE_out1)) &amp; std_logic_vector(resize(in1, BITSIZE_out1));
"
          />
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ui_concat_16_8_FU</name>
      <operation operation_name="VECT_CONCATENATION_16_8" supported_types="UINT:*|VECTOR_BOOL:*|REAL:*" execution_time="0.0000001"/>
      <component_timing_alias>ASSIGN_VECTOR_BOOL_FU</component_timing_alias>
      <circuit>
        <component_o id="ui_concat_16_8_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_concat_16_8_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in3" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in4" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in5" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in6" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in7" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in8" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_UINT" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="ui_concat_16_8_FU in1 in2 in3 in4 in5 in6 in7 in8 out1" VERILOG_PROVIDED="
wire [BITSIZE_out1-1:0] tmp_in1;
wire [BITSIZE_out1-1:0] tmp_in2;
wire [BITSIZE_out1-1:0] tmp_in3;
wire [BITSIZE_out1-1:0] tmp_in4;
wire [BITSIZE_out1-1:0] tmp_in5;
wire [BITSIZE_out1-1:0] tmp_in6;
wire [BITSIZE_out1-1:0] tmp_in7;
wire [BITSIZE_out1-1:0] tmp_in8;
assign tmp_in1 = in1;
assign tmp_in2 = in2;
assign tmp_in3 = in3;
assign tmp_in4 = in4;
assign tmp_in5 = in5;
assign tmp_in6 = in6;
assign tmp_in7 = in7;
assign tmp_in8 = in8;
assign out1 = {tmp_in8, tmp_in7, tmp_in6, tmp_in5, tmp_in4, tmp_in3, tmp_in2, tmp_in1};" VHDL_PROVIDED="
begin
   out1 &lt;= std_logic_vector(resize(in8, BITSIZE_out1)) &amp; std_logic_vector(resize(in7, BITSIZE_out1)) &amp; std_logic_vector(resize(in6, BITSIZE_out1)) &amp; std_logic_vector(resize(in5, BITSIZE_out1)) &amp; std_logic_vector(resize(in4, BITSIZE_out1)) &amp; std_logic_vector(resize(in3, BITSIZE_out1)) &amp; std_logic_vector(resize(in2, BITSIZE_out1)) &amp; std_logic_vector(resize(in1, BITSIZE_out1));
"
          />
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>concat_16_4_FU</name>
      <operation operation_name="VECT_CONCATENATION_16_4" supported_types="INT:*" execution_time="0.0000001"/>
      <component_timing_alias>ASSIGN_VECTOR_BOOL_FU</component_timing_alias>
      <circuit>
        <component_o id="concat_16_4_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="concat_16_4_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in3" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in4" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_INT" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="concat_16_4_FU in1 in2 in3 in4 out1" VERILOG_PROVIDED="
wire signed [BITSIZE_out1-1:0] tmp_in1;
wire signed [BITSIZE_out1-1:0] tmp_in2;
wire signed [BITSIZE_out1-1:0] tmp_in3;
wire signed [BITSIZE_out1-1:0] tmp_in4;
assign tmp_in1 = in1;
assign tmp_in2 = in2;
assign tmp_in3 = in3;
assign tmp_in4 = in4;
assign out1 = {tmp_in4, tmp_in3, tmp_in2, tmp_in1};" VHDL_PROVIDED="
begin
  out1 &lt;= std_logic_vector(resize(in4, BITSIZE_out1)) &amp; std_logic_vector(resize(in3, BITSIZE_out1)) &amp; std_logic_vector(resize(in2, BITSIZE_out1)) &amp; std_logic_vector(resize(in1, BITSIZE_out1));"
          />
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ui_concat_16_4_FU</name>
      <operation operation_name="VECT_CONCATENATION_16_4" supported_types="UINT:*|VECTOR_BOOL:*|REAL:*" execution_time="0.0000001"/>
      <component_timing_alias>ASSIGN_VECTOR_BOOL_FU</component_timing_alias>
      <circuit>
        <component_o id="ui_concat_16_4_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_concat_16_4_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in3" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in4" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_UINT" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="ui_concat_16_4_FU in1 in2 in3 in4 out1" VERILOG_PROVIDED="
wire [BITSIZE_out1-1:0] tmp_in1;
wire [BITSIZE_out1-1:0] tmp_in2;
wire [BITSIZE_out1-1:0] tmp_in3;
wire [BITSIZE_out1-1:0] tmp_in4;
assign tmp_in1 = in1;
assign tmp_in2 = in2;
assign tmp_in3 = in3;
assign tmp_in4 = in4;
assign out1 = {tmp_in4, tmp_in3, tmp_in2, tmp_in1};" VHDL_PROVIDED="
begin
  out1 &lt;= std_logic_vector(resize(in4, BITSIZE_out1)) &amp; std_logic_vector(resize(in3, BITSIZE_out1)) &amp; std_logic_vector(resize(in2, BITSIZE_out1)) &amp; std_logic_vector(resize(in1, BITSIZE_out1));"
          />
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>concat_12_3_FU</name>
      <operation operation_name="VECT_CONCATENATION_12_3" supported_types="INT:*" execution_time="0.0000001"/>
      <component_timing_alias>ASSIGN_VECTOR_BOOL_FU</component_timing_alias>
      <circuit>
        <component_o id="concat_12_3_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2016-2023 Politecnico di Milano</copyright>
          <authors>Marco Lattuada &lt;marco.lattuada@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="concat_12_3_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in3" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_INT" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="concat_12_3_FU in1 in2 in3 out1" VERILOG_PROVIDED="
wire signed [BITSIZE_out1-1:0] tmp_in1;
wire signed [BITSIZE_out1-1:0] tmp_in2;
wire signed [BITSIZE_out1-1:0] tmp_in3;
assign tmp_in1 = in1;
assign tmp_in2 = in2;
assign tmp_in3 = in3;
assign out1 = {tmp_in3, tmp_in2, tmp_in1};"
            VHDL_PROVIDED="
begin
  out1 &lt;= std_logic_vector(resize(in3, BITSIZE_out1)) &amp; std_logic_vector(resize(in2, BITSIZE_out1)) &amp; std_logic_vector(resize(in1, BITSIZE_out1));
"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ui_concat_12_3_FU</name>
      <operation operation_name="VECT_CONCATENATION_12_3" supported_types="UINT:*|VECTOR_BOOL:*|REAL:*" execution_time="0.0000001"/>
      <component_timing_alias>ASSIGN_VECTOR_BOOL_FU</component_timing_alias>
      <circuit>
        <component_o id="ui_concat_12_3_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2016-2023 Politecnico di Milano</copyright>
          <authors>Marco Lattuada &lt;marco.lattuada@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_concat_12_3_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in3" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_UINT" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="ui_concat_12_3_FU in1 in2 in3 out1" VERILOG_PROVIDED="wire [BITSIZE_out1-1:0] tmp_in1;
wire [BITSIZE_out1-1:0] tmp_in2;
wire [BITSIZE_out1-1:0] tmp_in3;
assign tmp_in1 = in1;
assign tmp_in2 = in2;
assign tmp_in3 = in3;
assign out1 = {tmp_in3, tmp_in2, tmp_in1};"
            VHDL_PROVIDED="begin
  out1 &lt;= std_logic_vector(resize(in3, BITSIZE_out1)) &amp; std_logic_vector(resize(in2, BITSIZE_out1)) &amp; std_logic_vector(resize(in1, BITSIZE_out1));
"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>concat_16_2_FU</name>
      <operation operation_name="VECT_CONCATENATION_16_2" supported_types="INT:*" execution_time="0.0000001"/>
      <component_timing_alias>ASSIGN_VECTOR_BOOL_FU</component_timing_alias>
      <circuit>
        <component_o id="concat_16_2_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="concat_16_2_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_INT" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="concat_16_2_FU in1 in2 out1" VERILOG_PROVIDED="wire signed [BITSIZE_out1-1:0] tmp_in1;
wire signed [BITSIZE_out1-1:0] tmp_in2;
assign tmp_in1 = in1;
assign tmp_in2 = in2;
assign out1 = {tmp_in2, tmp_in1};" VHDL_PROVIDED="begin
  out1 &lt;= std_logic_vector(resize(in2, BITSIZE_out1)) &amp; std_logic_vector(resize(in1, BITSIZE_out1));
"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ui_concat_16_2_FU</name>
      <operation operation_name="VECT_CONCATENATION_16_2" supported_types="UINT:*|VECTOR_BOOL:*|REAL:*" execution_time="0.0000001"/>
      <component_timing_alias>ASSIGN_VECTOR_BOOL_FU</component_timing_alias>
      <circuit>
        <component_o id="ui_concat_16_2_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_concat_16_2_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_UINT" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="ui_concat_16_2_FU in1 in2 out1" VERILOG_PROVIDED="wire [BITSIZE_out1-1:0] tmp_in1;
wire [BITSIZE_out1-1:0] tmp_in2;
assign tmp_in1 = in1;
assign tmp_in2 = in2;
assign out1 = {tmp_in2, tmp_in1};" VHDL_PROVIDED="begin
  out1 &lt;= std_logic_vector(resize(in2, BITSIZE_out1)) &amp; std_logic_vector(resize(in1, BITSIZE_out1));
"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>concat_24_3_FU</name>
      <operation operation_name="VECT_CONCATENATION_24_3" supported_types="INT:*" execution_time="0.0000001"/>
      <component_timing_alias>ASSIGN_VECTOR_BOOL_FU</component_timing_alias>
      <circuit>
        <component_o id="concat_24_3_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2016-2023 Politecnico di Milano</copyright>
          <authors>Marco Lattuada &lt;marco.lattuada@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="concat_24_3_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in3" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_INT" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="concat_24_3_FU in1 in2 in3 out1" VERILOG_PROVIDED="wire signed [BITSIZE_out1-1:0] tmp_in1;
wire signed [BITSIZE_out1-1:0] tmp_in2;
wire signed [BITSIZE_out1-1:0] tmp_in3;
assign tmp_in1 = in1;
assign tmp_in2 = in2;
assign tmp_in3 = in3;
assign out1 = {tmp_in3, tmp_in2, tmp_in1};
" VHDL_PROVIDED="begin
  out1 &lt;= std_logic_vector(resize(in3, BITSIZE_out1)) &amp; std_logic_vector(resize(in2, BITSIZE_out1)) &amp; std_logic_vector(resize(in1, BITSIZE_out1));
"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ui_concat_24_3_FU</name>
      <operation operation_name="VECT_CONCATENATION_24_3" supported_types="UINT:*|VECTOR_BOOL:*|REAL:*" execution_time="0.0000001"/>
      <component_timing_alias>ASSIGN_VECTOR_BOOL_FU</component_timing_alias>
      <circuit>
        <component_o id="ui_concat_24_3_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2016-2023 Politecnico di Milano</copyright>
          <authors>Marco Lattuada &lt;marco.lattuada@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_concat_24_3_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in3" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_UINT" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="ui_concat_24_3_FU in1 in2 in3 out1" VERILOG_PROVIDED="wire signed [BITSIZE_out1-1:0] tmp_in1;
wire signed [BITSIZE_out1-1:0] tmp_in2;
wire signed [BITSIZE_out1-1:0] tmp_in3;
assign tmp_in1 = in1;
assign tmp_in2 = in2;
assign tmp_in3 = in3;
assign out1 = {tmp_in3, tmp_in2, tmp_in1};
" VHDL_PROVIDED="begin
  out1 &lt;= std_logic_vector(resize(in3, BITSIZE_out1)) &amp; std_logic_vector(resize(in2, BITSIZE_out1)) &amp; std_logic_vector(resize(in1, BITSIZE_out1));
"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>concat_32_4_FU</name>
      <operation operation_name="VECT_CONCATENATION_32_4" supported_types="INT:*" execution_time="0.0000001"/>
      <component_timing_alias>ASSIGN_VECTOR_BOOL_FU</component_timing_alias>
      <circuit>
        <component_o id="concat_32_4_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Marco Lattuada &lt;marco.lattuada@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="concat_32_4_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in3" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in4" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_INT" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="concat_32_4_FU in1 in2 in3 in4 out1" VERILOG_PROVIDED="wire signed [BITSIZE_out1-1:0] tmp_in1;
wire signed [BITSIZE_out1-1:0] tmp_in2;
wire signed [BITSIZE_out1-1:0] tmp_in3;
wire signed [BITSIZE_out1-1:0] tmp_in4;
assign tmp_in1 = in1;
assign tmp_in2 = in2;
assign tmp_in3 = in3;
assign tmp_in4 = in4;
assign out1 = {tmp_in4, tmp_in3, tmp_in2, tmp_in1};" VHDL_PROVIDED="begin
   out1 &lt;= std_logic_vector(resize(in4,BITSIZE_out1)) &amp; std_logic_vector(resize(in3, BITSIZE_out1)) &amp; std_logic_vector(resize(in2, BITSIZE_out1)) &amp; std_logic_vector(resize(in1, BITSIZE_out1));
"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ui_concat_32_4_FU</name>
      <operation operation_name="VECT_CONCATENATION_32_4" supported_types="UINT:*|VECTOR_BOOL:*|REAL:*" execution_time="0.0000001"/>
      <component_timing_alias>ASSIGN_VECTOR_BOOL_FU</component_timing_alias>
      <circuit>
        <component_o id="ui_concat_32_4_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2014-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_concat_32_4_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in3" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in4" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_UINT" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="ui_concat_32_4_FU in1 in2 in3 in4 out1" VERILOG_PROVIDED="wire [BITSIZE_out1-1:0] tmp_in1;
wire [BITSIZE_out1-1:0] tmp_in2;
wire [BITSIZE_out1-1:0] tmp_in3;
wire [BITSIZE_out1-1:0] tmp_in4;
assign tmp_in1 = in1;
assign tmp_in2 = in2;
assign tmp_in3 = in3;
assign tmp_in4 = in4;
assign out1 = {tmp_in4, tmp_in3, tmp_in2, tmp_in1};" VHDL_PROVIDED="begin
   out1 &lt;= std_logic_vector(resize(in4,BITSIZE_out1)) &amp; std_logic_vector(resize(in3, BITSIZE_out1)) &amp; std_logic_vector(resize(in2, BITSIZE_out1)) &amp; std_logic_vector(resize(in1, BITSIZE_out1));
"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>concat_32_8_FU</name>
      <operation operation_name="VECT_CONCATENATION_32_8" supported_types="INT:*" execution_time="0.0000001"/>
      <component_timing_alias>ASSIGN_VECTOR_BOOL_FU</component_timing_alias>
      <circuit>
        <component_o id="concat_32_8_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Marco Lattuada &lt;marco.lattuada@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="concat_32_8_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in3" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in4" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in5" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in6" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in7" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in8" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_INT" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="concat_32_8_FU in1 in2 in3 in4 in5 in6 in7 in8 out1" VERILOG_PROVIDED="wire signed [BITSIZE_out1-1:0] tmp_in1;
wire signed [BITSIZE_out1-1:0] tmp_in2;
wire signed [BITSIZE_out1-1:0] tmp_in3;
wire signed [BITSIZE_out1-1:0] tmp_in4;
wire signed [BITSIZE_out1-1:0] tmp_in5;
wire signed [BITSIZE_out1-1:0] tmp_in6;
wire signed [BITSIZE_out1-1:0] tmp_in7;
wire signed [BITSIZE_out1-1:0] tmp_in8;
assign tmp_in1 = in1;
assign tmp_in2 = in2;
assign tmp_in3 = in3;
assign tmp_in4 = in4;
assign tmp_in5 = in5;
assign tmp_in6 = in6;
assign tmp_in7 = in7;
assign tmp_in8 = in8;
assign out1 = {tmp_in8, tmp_in7, tmp_in6, tmp_in5, tmp_in4, tmp_in3, tmp_in2, tmp_in1};" VHDL_PROVIDED="begin
   out1 &lt;= std_logic_vector(resize(in8, BITSIZE_out1)) &amp; std_logic_vector(resize(in7, BITSIZE_out1)) &amp; std_logic_vector(resize(in6, BITSIZE_out1)) &amp; std_logic_vector(resize(in5, BITSIZE_out1)) &amp; std_logic_vector(resize(in4, BITSIZE_out1)) &amp; std_logic_vector(resize(in3, BITSIZE_out1)) &amp; std_logic_vector(resize(in2, BITSIZE_out1)) &amp; std_logic_vector(resize(in1, BITSIZE_out1));
"
          />
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ui_concat_32_8_FU</name>
      <operation operation_name="VECT_CONCATENATION_32_8" supported_types="UINT:*|VECTOR_BOOL:*|REAL:*" execution_time="0.0000001"/>
      <component_timing_alias>ASSIGN_VECTOR_BOOL_FU</component_timing_alias>
      <circuit>
        <component_o id="ui_concat_32_8_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Marco Lattuada &lt;marco.lattuada@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_concat_32_8_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in3" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in4" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in5" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in6" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in7" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in8" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_UINT" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="ui_concat_32_8_FU in1 in2 in3 in4 in5 in6 in7 in8 out1" VERILOG_PROVIDED="wire [BITSIZE_out1-1:0] tmp_in1;
wire [BITSIZE_out1-1:0] tmp_in2;
wire [BITSIZE_out1-1:0] tmp_in3;
wire [BITSIZE_out1-1:0] tmp_in4;
wire [BITSIZE_out1-1:0] tmp_in5;
wire [BITSIZE_out1-1:0] tmp_in6;
wire [BITSIZE_out1-1:0] tmp_in7;
wire [BITSIZE_out1-1:0] tmp_in8;
assign tmp_in1 = in1;
assign tmp_in2 = in2;
assign tmp_in3 = in3;
assign tmp_in4 = in4;
assign tmp_in5 = in5;
assign tmp_in6 = in6;
assign tmp_in7 = in7;
assign tmp_in8 = in8;
assign out1 = {tmp_in8, tmp_in7, tmp_in6, tmp_in5, tmp_in4, tmp_in3, tmp_in2, tmp_in1};" VHDL_PROVIDED="begin
   out1 &lt;= std_logic_vector(resize(in8, BITSIZE_out1)) &amp; std_logic_vector(resize(in7, BITSIZE_out1)) &amp; std_logic_vector(resize(in6, BITSIZE_out1)) &amp; std_logic_vector(resize(in5, BITSIZE_out1)) &amp; std_logic_vector(resize(in4, BITSIZE_out1)) &amp; std_logic_vector(resize(in3, BITSIZE_out1)) &amp; std_logic_vector(resize(in2, BITSIZE_out1)) &amp; std_logic_vector(resize(in1, BITSIZE_out1));
"
          />
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>concat_64_8_FU</name>
      <operation operation_name="VECT_CONCATENATION_64_8" supported_types="INT:*" execution_time="0.0000001"/>
      <component_timing_alias>ASSIGN_VECTOR_BOOL_FU</component_timing_alias>
      <circuit>
        <component_o id="concat_64_8_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Marco Lattuada &lt;marco.lattuada@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="concat_64_8_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in3" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in4" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in5" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in6" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in7" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in8" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_INT" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="concat_64_8_FU in1 in2 in3 in4 in5 in6 in7 in8 out1" VERILOG_PROVIDED="wire signed [BITSIZE_out1-1:0] tmp_in1;
wire signed [BITSIZE_out1-1:0] tmp_in2;
wire signed [BITSIZE_out1-1:0] tmp_in3;
wire signed [BITSIZE_out1-1:0] tmp_in4;
wire signed [BITSIZE_out1-1:0] tmp_in5;
wire signed [BITSIZE_out1-1:0] tmp_in6;
wire signed [BITSIZE_out1-1:0] tmp_in7;
wire signed [BITSIZE_out1-1:0] tmp_in8;
assign tmp_in1 = in1;
assign tmp_in2 = in2;
assign tmp_in3 = in3;
assign tmp_in4 = in4;
assign tmp_in5 = in5;
assign tmp_in6 = in6;
assign tmp_in7 = in7;
assign tmp_in8 = in8;
assign out1 = {tmp_in8, tmp_in7, tmp_in6, tmp_in5, tmp_in4, tmp_in3, tmp_in2, tmp_in1};" VHDL_PROVIDED="begin
  out1 &lt;= std_logic_vector(resize(in8, BITSIZE_out1)) &amp; std_logic_vector(resize(in7, BITSIZE_out1)) &amp; std_logic_vector(resize(in6, BITSIZE_out1)) &amp; std_logic_vector(resize(in5, BITSIZE_out1)) &amp; std_logic_vector(resize(in4, BITSIZE_out1)) &amp; std_logic_vector(resize(in3, BITSIZE_out1)) &amp; std_logic_vector(resize(in2, BITSIZE_out1)) &amp; std_logic_vector(resize(in1, BITSIZE_out1));
"
          />
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ui_concat_64_8_FU</name>
      <operation operation_name="VECT_CONCATENATION_64_8" supported_types="UINT:*|VECTOR_BOOL:*|REAL:*" execution_time="0.0000001"/>
      <component_timing_alias>ASSIGN_VECTOR_BOOL_FU</component_timing_alias>
      <circuit>
        <component_o id="ui_concat_64_8_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Marco Lattuada &lt;marco.lattuada@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_concat_64_8_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in3" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in4" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in5" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in6" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in7" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in8" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_UINT" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="ui_concat_64_8_FU in1 in2 in3 in4 in5 in6 in7 in8 out1" VERILOG_PROVIDED="wire signed [BITSIZE_out1-1:0] tmp_in1;
wire signed [BITSIZE_out1-1:0] tmp_in2;
wire signed [BITSIZE_out1-1:0] tmp_in3;
wire signed [BITSIZE_out1-1:0] tmp_in4;
wire signed [BITSIZE_out1-1:0] tmp_in5;
wire signed [BITSIZE_out1-1:0] tmp_in6;
wire signed [BITSIZE_out1-1:0] tmp_in7;
wire signed [BITSIZE_out1-1:0] tmp_in8;
assign tmp_in1 = in1;
assign tmp_in2 = in2;
assign tmp_in3 = in3;
assign tmp_in4 = in4;
assign tmp_in5 = in5;
assign tmp_in6 = in6;
assign tmp_in7 = in7;
assign tmp_in8 = in8;
assign out1 = {tmp_in8, tmp_in7, tmp_in6, tmp_in5, tmp_in4, tmp_in3, tmp_in2, tmp_in1};" VHDL_PROVIDED="begin
  out1 &lt;= std_logic_vector(resize(in8, BITSIZE_out1)) &amp; std_logic_vector(resize(in7, BITSIZE_out1)) &amp; std_logic_vector(resize(in6, BITSIZE_out1)) &amp; std_logic_vector(resize(in5, BITSIZE_out1)) &amp; std_logic_vector(resize(in4, BITSIZE_out1)) &amp; std_logic_vector(resize(in3, BITSIZE_out1)) &amp; std_logic_vector(resize(in2, BITSIZE_out1)) &amp; std_logic_vector(resize(in1, BITSIZE_out1));
"
          />
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>bus_merger</name>
      <circuit>
        <component_o id="bus_merger">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2013-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="bus_merger"/>
          <port_vector_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="bus_merger in1 out1" VERILOG_PROVIDED="
function [BITSIZE_out1-1:0] merge;
  input [BITSIZE_in1*PORTSIZE_in1-1:0] m;
  reg [BITSIZE_out1-1:0] res;
  integer i1;
begin
  res={BITSIZE_in1{1&apos;b0}};
  for(i1 = 0; i1 &lt; PORTSIZE_in1; i1 = i1 + 1)
  begin
    res = res | m[i1*BITSIZE_in1 +:BITSIZE_in1];
  end
  merge = res;
end
endfunction

assign out1 = merge(in1);" VHDL_PROVIDED="begin
process(in1)
variable temp_out1 : std_logic_vector(BITSIZE_out1-1 downto 0);
begin
  temp_out1 := (others =&gt; &apos;0&apos;);
  for I in 0 to PORTSIZE_in1-1 loop
    temp_out1 := temp_out1 or in1(((I+1)*BITSIZE_in1)-1 downto (I*BITSIZE_in1));
  end loop;  out1 &lt;= temp_out1;
end process;
"/>
        </component_o>
      </circuit>
    </cell>
    <template>
      <name>DEMUX_GATE</name>
      <circuit>
        <component_o id="DEMUX_GATE">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2012-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;, Marco Minutoli &lt;mminutoli@gmail.com&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="DEMUX_GATE"/>
          <port_o id="sel" dir="IN">
            <structural_type_descriptor type="BOOL"/>
          </port_o>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="out2" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="DEMUX_GATE in1 out1 out2" VERILOG_PROVIDED="
reg [BITSIZE_out1-1:0] out1;
reg [BITSIZE_out2-1:0] out2;
always @ (sel or in1)
  case (sel)
    1&apos;b1: {out1, out2} = {{BITSIZE_out1{1&apos;b0}}, in1};
    default: {out1, out2} = {in1, {BITSIZE_out2{1&apos;b0}}};
  endcase"/>
        </component_o>
      </circuit>
    </template>
    <cell>
      <name>flipflop_AR</name>
      <circuit>
        <component_o id="flipflop_AR">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Marco Lattuada &lt;marco.lattuada@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="flipflop_AR"/>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <NP_functionality LIBRARY="flipflop_AR in1 out1" VERILOG_PROVIDED="
reg reg_out1 1INIT_ZERO_VALUE;
assign out1 = reg_out1;
always @(posedge clock 1RESET_EDGE)
  if (1RESET_VALUE)
    reg_out1 &lt;= {BITSIZE_out1{1&apos;b0}};
  else
    reg_out1 &lt;= in1;" VHDL_PROVIDED="
signal reg_out1 : std_logic 1INIT_ZERO_VALUEb;
begin
  process(clock,reset)
  begin
    if(1RESET_VALUE) then
      reg_out1 &lt;= &apos;0&apos;;
    elsif(clock&apos;event and clock = &apos;1&apos;) then
      reg_out1 &lt;= in1;
    end if;
  end process;
  out1 &lt;= reg_out1;
"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>flipflop_SR</name>
      <circuit>
        <component_o id="flipflop_SR">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Marco Lattuada &lt;marco.lattuada@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="flipflop_SR"/>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <NP_functionality LIBRARY="flipflop_SR in1 out1" VERILOG_PROVIDED="
reg reg_out1 1INIT_ZERO_VALUE;
assign out1 = reg_out1;
always @(posedge clock)
  if (1RESET_VALUE)
    reg_out1 &lt;= {BITSIZE_out1{1&apos;b0}};
  else
    reg_out1 &lt;= in1;
" VHDL_PROVIDED="
signal reg_out1 : std_logic 1INIT_ZERO_VALUEb;
begin
   out1 &lt;= reg_out1;
   process(clock)
   begin
      if(clock&apos;event and clock=&apos;1&apos;) then
         if(1RESET_VALUE) then
            reg_out1 &lt;= &apos;0&apos;;
         else
            reg_out1 &lt;= in1;
         end if;
      end if;
  end process;

"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>join_signal</name>
      <attribute name="area" value_type="float64">0</attribute>
      <circuit>
        <component_o id="join_signal">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="join_signal"/>
          <port_vector_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="join_signal in1 out1" VERILOG_PROVIDED="
generate
genvar i1;
for (i1=0; i1&lt;PORTSIZE_in1; i1=i1+1)
  begin : L1
    assign out1[(i1+1)*(BITSIZE_out1/PORTSIZE_in1)-1:i1*(BITSIZE_out1/PORTSIZE_in1)] = in1[(i1+1)*BITSIZE_in1-1:i1*BITSIZE_in1];
  end
endgenerate" VHDL_PROVIDED="
begin
  process(in1)
  begin
    for i1 in 0 to PORTSIZE_in1-1 loop
    out1((i1+1)*(BITSIZE_out1/PORTSIZE_in1)-1 downto i1*(BITSIZE_out1/PORTSIZE_in1)) &lt;= in1((i1+1)*BITSIZE_in1-1 downto i1*BITSIZE_in1);
     end loop;
  end process;
"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>register_AR</name>
      <circuit>
        <component_o id="register_AR">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="register_AR"/>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="register_AR in1 out1" VERILOG_PROVIDED="
reg [BITSIZE_out1-1:0] reg_out1 1INIT_ZERO_VALUE;
assign out1 = reg_out1;
always @(posedge clock 1RESET_EDGE)
  if (1RESET_VALUE)
    reg_out1 &lt;= {BITSIZE_out1{1&apos;b0}};
  else
    reg_out1 &lt;= in1;" VHDL_PROVIDED="
signal reg_out1 : std_logic_vector(BITSIZE_out1-1 downto 0) 1INIT_ZERO_VALUE;
begin
  out1 &lt;= reg_out1;
  process(clock,reset)
  begin
    if(1RESET_VALUE) then
      reg_out1 &lt;= (others =&gt; &apos;0&apos;);
    elsif(clock&apos;event and clock = &apos;1&apos;) then
      reg_out1 &lt;= in1;
    end if;
  end process;
"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>register_AR_NORETIME</name>
      <circuit>
        <component_o id="register_AR_NORETIME">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2013-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="register_AR_NORETIME"/>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="register_AR_NORETIME in1 out1" VERILOG_PROVIDED="
(* dont_retime *)(* keep = &quot;true&quot; *)(* syn_keep=1 *)(* DONT_TOUCH = &quot;true&quot; *) reg [BITSIZE_out1-1:0] reg_out1 1INIT_ZERO_VALUE;
assign out1 = reg_out1;
always @(posedge clock 1RESET_EDGE)
  if (1RESET_VALUE)
    reg_out1 &lt;= {BITSIZE_out1{1&apos;b0}};
  else
    reg_out1 &lt;= in1;" VHDL_PROVIDED="
signal reg_out1 : std_logic_vector(BITSIZE_out1-1 downto 0) 1INIT_ZERO_VALUE;
attribute dont_retime : boolean;
attribute dont_retime of reg_out1 : signal is true;
attribute syn_keep: boolean;
attribute syn_keep of reg_out1: signal is true;
attribute DONT_TOUCH : boolean;
attribute DONT_TOUCH of reg_out1 : signal is true;
begin
  out1 &lt;= reg_out1;
  process(clock,reset)
  begin
    if(1RESET_VALUE) then
      reg_out1 &lt;= (others =&gt; &apos;0&apos;);
    elsif(clock&apos;event and clock = &apos;1&apos;) then
      reg_out1 &lt;= in1;
    end if;
  end process;
"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>register_AR_NORETIME_INT</name>
      <circuit>
        <component_o id="register_AR_NORETIME_INT">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2020-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="register_AR_NORETIME_INT"/>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <NP_functionality LIBRARY="register_AR_NORETIME_INT in1 out1" VERILOG_PROVIDED="
(* dont_retime *)(* keep = &quot;true&quot; *)(* syn_keep=1 *)(* DONT_TOUCH = &quot;true&quot; *) reg signed [BITSIZE_out1-1:0] reg_out1 1INIT_ZERO_VALUE;
assign out1 = reg_out1;
always @(posedge clock)
  if (1RESET_VALUE)
    reg_out1 &lt;= {BITSIZE_out1{1&apos;b0}};
  else
    reg_out1 &lt;= in1;" VHDL_PROVIDED="
signal reg_out1 : signed(BITSIZE_out1-1 downto 0) 1INIT_ZERO_VALUE;
attribute dont_retime : boolean;
attribute dont_retime of reg_out1 : signal is true;
attribute syn_keep: boolean;
attribute syn_keep of reg_out1: signal is true;
attribute DONT_TOUCH : boolean;
attribute DONT_TOUCH of reg_out1 : signal is true;
begin
  out1 &lt;= reg_out1;
  process(clock,reset)
  begin
    if(1RESET_VALUE) then
      reg_out1 &lt;= (others =&gt; &apos;0&apos;);
    elsif(clock&apos;event and clock = &apos;1&apos;) then
      reg_out1 &lt;= in1;
    end if;
  end process;
"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>register_AR_NORETIME_UINT</name>
      <circuit>
        <component_o id="register_AR_NORETIME_UINT">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2020-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="register_AR_NORETIME_UINT"/>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <NP_functionality LIBRARY="register_AR_NORETIME_UINT in1 out1" VERILOG_PROVIDED="
(* dont_retime *)(* keep = &quot;true&quot; *)(* syn_keep=1 *)(* DONT_TOUCH = &quot;true&quot; *) reg [BITSIZE_out1-1:0] reg_out1 1INIT_ZERO_VALUE;
assign out1 = reg_out1;
always @(posedge clock)
  if (1RESET_VALUE)
    reg_out1 &lt;= {BITSIZE_out1{1&apos;b0}};
  else
    reg_out1 &lt;= in1;" VHDL_PROVIDED="
signal reg_out1 : unsigned(BITSIZE_out1-1 downto 0) 1INIT_ZERO_VALUE;
attribute dont_retime : boolean;
attribute dont_retime of reg_out1 : signal is true;
attribute syn_keep: boolean;
attribute syn_keep of reg_out1: signal is true;
attribute DONT_TOUCH : boolean;
attribute DONT_TOUCH of reg_out1 : signal is true;
begin
  out1 &lt;= reg_out1;
  process(clock,reset)
  begin
    if(1RESET_VALUE) then
      reg_out1 &lt;= (others =&gt; &apos;0&apos;);
    elsif(clock&apos;event and clock = &apos;1&apos;) then
      reg_out1 &lt;= in1;
    end if;
  end process;
"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>register_AR_NORETIME_REAL</name>
      <circuit>
        <component_o id="register_AR_NORETIME_REAL">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2020-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="register_AR_NORETIME_REAL"/>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="REAL" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="REAL" size="1"/>
          </port_o>
          <NP_functionality LIBRARY="register_AR_NORETIME_REAL in1 out1" VERILOG_PROVIDED="
(* dont_retime *)(* keep = &quot;true&quot; *)(* syn_keep=1 *)(* DONT_TOUCH = &quot;true&quot; *) reg [BITSIZE_out1-1:0] reg_out1 1INIT_ZERO_VALUE;
assign out1 = reg_out1;
always @(posedge clock)
  if (1RESET_VALUE)
    reg_out1 &lt;= {BITSIZE_out1{1&apos;b0}};
  else
    reg_out1 &lt;= in1;" VHDL_PROVIDED="
signal reg_out1 : std_logic_vector(BITSIZE_out1-1 downto 0) 1INIT_ZERO_VALUE;
attribute dont_retime : boolean;
attribute dont_retime of reg_out1 : signal is true;
attribute syn_keep: boolean;
attribute syn_keep of reg_out1: signal is true;
attribute DONT_TOUCH : boolean;
attribute DONT_TOUCH of reg_out1 : signal is true;
begin
  out1 &lt;= reg_out1;
  process(clock,reset)
  begin
    if(1RESET_VALUE) then
      reg_out1 &lt;= (others =&gt; &apos;0&apos;);
    elsif(clock&apos;event and clock = &apos;1&apos;) then
      reg_out1 &lt;= in1;
    end if;
  end process;
"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>register_SARSE</name>
      <circuit>
        <component_o id="register_SARSE">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="register_SARSE"/>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="wenable" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="register_SARSE in1 out1" VERILOG_PROVIDED="
reg [BITSIZE_out1-1:0] reg_out1 1INIT_ZERO_VALUE;
assign out1 = reg_out1;
always @(posedge clock 1RESET_EDGE)
  if (1RESET_VALUE)
    reg_out1 &lt;= {BITSIZE_out1{1&apos;b0}};
  else if (wenable)
    reg_out1 &lt;= in1;" VHDL_PROVIDED="
signal reg_out1 : std_logic_vector(BITSIZE_out1-1 downto 0) 1INIT_ZERO_VALUE;
begin
  out1 &lt;= reg_out1;
  process(clock,reset)
  begin
    if(1RESET_VALUE) then
      reg_out1 &lt;= (others =&gt; &apos;0&apos;);
    elsif(clock&apos;event and clock = &apos;1&apos;) then
      if (wenable = &apos;1&apos;) then
        reg_out1 &lt;= in1;
      end if;
    end if;
  end process;
"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>register_SE</name>
      <circuit>
        <component_o id="register_SE">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="register_SE"/>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="wenable" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="register_SE in1 out1" VERILOG_PROVIDED="
reg [BITSIZE_out1-1:0] reg_out1 1INIT_ZERO_VALUE;
assign out1 = reg_out1;
always @(posedge clock)
  if (wenable)
    reg_out1 &lt;= in1;"
            VHDL_PROVIDED="
signal reg_out1 : std_logic_vector(BITSIZE_out1-1 downto 0) 1INIT_ZERO_VALUE;
begin
  out1 &lt;= reg_out1;
  process(clock)
  begin
    if(clock&apos;event and clock = &apos;1&apos;) then
      if(wenable = &apos;1&apos;) then
        reg_out1 &lt;= in1;
      end if;
    end if;
  end process;
"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>register_SR</name>
      <circuit>
        <component_o id="register_SR">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="register_SR"/>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="register_SR in1 out1" VERILOG_PROVIDED="
reg [BITSIZE_out1-1:0] reg_out1 1INIT_ZERO_VALUE;
assign out1 = reg_out1;
always @(posedge clock)
  if (1RESET_VALUE)
    reg_out1 &lt;= {BITSIZE_out1{1&apos;b0}};
  else
    reg_out1 &lt;= in1;"
            VHDL_PROVIDED="signal reg_out1 : std_logic_vector(BITSIZE_out1-1 downto 0) 1INIT_ZERO_VALUE;
begin
  out1 &lt; reg_out1;
  process(clock)
  begin
    if(clock&apos;event and clock = &apos;1&apos;) then
      if(1RESET_VALUE)
        reg_out &lt;= (others =&gt; &apos;0&apos;);
      else
        reg_out1 &lt; in1;
      end if;
    end if;
  end process;
"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>register_SRSE</name>
      <circuit>
        <component_o id="register_SRSE">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="register_SRSE"/>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="wenable" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="register_SRSE in1 out1" VERILOG_PROVIDED="
reg [BITSIZE_out1-1:0] reg_out1 1INIT_ZERO_VALUE;
assign out1 = reg_out1;
always @(posedge clock)
  if (1RESET_VALUE)
    reg_out1 &lt;= {BITSIZE_out1{1&apos;b0}};
  else if (wenable)
    reg_out1 &lt;= in1;" VHDL_PROVIDED="
signal reg_out1 : std_logic_vector(BITSIZE_out1-1 downto 0) 1INIT_ZERO_VALUE;
begin
  out1 &lt;= reg_out1;
  process(clock)
  begin
    if(clock&apos;event and clock = &apos;1&apos;) then
      if(1RESET_VALUE) then
        reg_out1 &lt;= (others =&gt; &apos;0&apos;);
      elsif (wenable = &apos;1&apos;) then
        reg_out1 &lt;= in1;
      end if;
    end if;
  end process;
"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>register_STD</name>
      <circuit>
        <component_o id="register_STD">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="register_STD"/>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="wenable" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="register_STD in1 out1" VERILOG_PROVIDED="reg [BITSIZE_out1-1:0] reg_out1 1INIT_ZERO_VALUE;
assign out1 = reg_out1;
always @(posedge clock)
  reg_out1 &lt;= in1;
" VHDL_PROVIDED="
signal reg_out1 : std_logic_vector(BITSIZE_out1-1 downto 0) 1INIT_ZERO_VALUE;
begin
out1 &lt;= reg_out1;
process(clock)
begin
  if(clock&apos;event and clock = &apos;1&apos;) then
    reg_out1 &lt;= in1;
  end if;
end process;
"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>register_SHIFT</name>
      <circuit>
        <component_o id="register_SHIFT">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="register_SHIFT"/>
          <parameter name="CONTROLLER_LENGTH">0</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="wenable" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <NP_functionality LIBRARY="register_SHIFT CONTROLLER_LENGTH" VERILOG_PROVIDED="
generate if (CONTROLLER_LENGTH == 0) 
begin
  assign out1 = in1;
end
else
begin
  reg [CONTROLLER_LENGTH-1:0] reg_out1 1INIT_ZERO_VALUE;
  assign out1 = reg_out1[CONTROLLER_LENGTH-1];
  always @(posedge clock)
    if(1RESET_VALUE)
      reg_out1 &lt;= {CONTROLLER_LENGTH{1&apos;b0}};
    else
      reg_out1 &lt;= (reg_out1 &lt;&lt; 1) | in1;
end
endgenerate
" VHDL_PROVIDED="
begin
zero_case: if CONTROLLER_LENGTH /= 0 generate 
signal reg_out1 : std_logic_vector(CONTROLLER_LENGTH-1 downto 0) 1INIT_ZERO_VALUE;
begin
out1 &lt;= reg_out1(CONTROLLER_LENGTH-1);
process(clock)
begin
  if(clock&apos;event and clock = &apos;1&apos;) then
    if(1RESET_VALUE) then
      reg_out1 &lt;= (others =&gt; &apos;0&apos;);
    else
      reg_out1(CONTROLLER_LENGTH-1 downto 1) &lt;= reg_out1(CONTROLLER_LENGTH-2 downto 0);
      reg_out1(0) &lt;= in1;
    end if;
  end if;
end process;
end generate zero_case;

nonzero_case: if CONTROLLER_LENGTH = 0 generate 
  out1 &lt;= in1;
end generate nonzero_case;

"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>split_signal</name>
      <attribute name="area" value_type="float64">0</attribute>
      <circuit>
        <component_o id="split_signal">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="split_signal"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_vector_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <NP_functionality LIBRARY="split_signal in1 out1" VERILOG_PROVIDED="assign out1 = in1;" VHDL_PROVIDED="begin
  out1 &lt;= in1;"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>Stage_controller</name>
      <circuit>
        <component_o id="Stage_controller">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Luca Ezio Pozzoni &lt;lucaezio.pozzoni@mail.polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="Stage_controller"/>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="valid_in" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="ready_in" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="valid_out" dir="OUT">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="ready_out" dir="OUT">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="selector_out" dir="OUT">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="std_wenable" dir="OUT">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="stall_wenable" dir="OUT">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <NP_functionality LIBRARY="Stage_controller" VERILOG_PROVIDED="parameter [1:0] IDLE = 2&apos;b00;
  parameter [1:0] SEND = 2&apos;b01;
  parameter [1:0] FULL = 2&apos;b10;

  reg selector_out;
  reg std_wenable;
  reg stall_wenable;

  reg [1:0] state, state_next;
  
  always @(posedge in_clk)
  begin
    state &lt;= state_next;
    if(1RESET_VALUE)
    begin
      state &lt;= IDLE;
    end
  end
  
  always @(*)
  begin
    state_next = state;
    std_wenable = 0;
    stall_wenable = 0;
    selector_out = 0;
    case (state)
      IDLE    :
      begin
        if(valid_in)
        begin
          state_next = SEND;
          std_wenable = 1;
        end
      end
      SEND    :
      begin
        if(valid_in ^ ready_in)
        begin
          if(valid_in)
          begin
            state_next = FULL;
            stall_wenable = 1;
          end
          else
          begin
            state_next = IDLE;
          end
        end
        else
        begin
          if(ready_in)
          begin
            std_wenable = 1;
          end
        end
      end
      FULL    :
      begin
        selector_out = 1;
        if((!valid_in) &lt;&lt; (ready_in))
        begin
          state_next = SEND;
          std_wenable = 1;
        end
      end
      default :
      begin
        state_next = IDLE;
      end
    endcase
  end

  assign valid_out = ((state == SEND) || (state == FULL));
  assign ready_out = ((state == IDLE) || (state == SEND));"/>
        </component_o>
      </circuit>
    </cell>
  </library>
  <library>
    <name>STD_FU</name>
    <cell>
      <name>ui_const_mult_expr_FU</name>
      <circuit>
        <component_o id="ui_const_mult_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2014-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_const_mult_expr_FU"/>
          <parameter name="VALUE_PARAMETER">0</parameter>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <NP_functionality LIBRARY="ui_const_mult_expr_FU in1 in2 out1 VALUE_PARAMETER" VERILOG_PROVIDED="assign out1 = in1 * VALUE_PARAMETER;" VHDL_PROVIDED="begin
  out1 &lt;= resize(in1 * VALUE_PARAMETER, BITSIZE_out1);
"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ui_align_plus_expr_FU</name>
      <circuit>
        <component_o id="ui_align_plus_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2015-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_align_plus_expr_FU"/>
          <parameter name="VALUE_PARAMETER">0</parameter>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <NP_functionality LIBRARY="ui_align_plus_expr_FU in1 in2 out1 VALUE_PARAMETER" VERILOG_PROVIDED="generate if (BITSIZE_out1 &gt; VALUE_PARAMETER) assign out1[BITSIZE_out1-1:VALUE_PARAMETER] = (in1[BITSIZE_in1-1:VALUE_PARAMETER] + in2[BITSIZE_in2-1:VALUE_PARAMETER]); endgenerate
generate if (VALUE_PARAMETER != 0) assign out1[VALUE_PARAMETER-1:0] = 0; endgenerate" VHDL_PROVIDED="begin
  out1 &lt;= resize(in1, BITSIZE_out1) + resize(in2, BITSIZE_out1);"/>
        </component_o>
      </circuit>
    </cell>
  </library>
</technology>