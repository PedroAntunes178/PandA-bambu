name: Full Regressions GCC

on:
  pull_request:
    branches:
      - main

  workflow_dispatch:

env:
  compilers: gcc-4.5,gcc-4.6,gcc-4.7,gcc-4.8,gcc-4.9,gcc-5,gcc-6,gcc-7,gcc-8,clang-6
  build-compiler: gcc-8
  configure: --enable-glpk --enable-flopoco --enable-opt --with-opt-level=2 --enable-release CC=gcc-8 CXX=g++-8
  report-dir: test-reports
  storage-url: ${{secrets.CI_STORAGE_URL}}
  storage-user: "${{secrets.CI_STORAGE_USER}}"
  storage-token: "${{secrets.CI_STORAGE_TOKEN}}"
  host_jobs: $J

jobs:
  build:
    uses: ./.github/workflows/build-appimage.yml
    with:
      package-name: bambu-gcc-full
      compilers: ${{env.compilers}}
      build-compiler: ${{env.build-compiler}}
      configure: ${{env.configure}}

  gcc_regression_simple:
    needs: [build]
    runs-on: [self-hosted, long]
    env:
      basename: regression_simple
      args: -c=--simulator=VERILATOR -t150m
    strategy:
      fail-fast: false
      matrix:
        compiler:
          [
            I386_GCC45 --skip_list 20071202-1,
            I386_GCC46,
            I386_GCC47,
            I386_GCC48,
            I386_GCC49,
            I386_GCC5,
            I386_GCC6,
            I386_GCC7,
            I386_GCC8,
          ]
        script:
          [
            generic_gcc_regression_simple_bambu_pretty_print.sh --skip_list 20071029-1,
            generic_gcc_regression_simple_bambu.sh,
            generic_gcc_regression_simple_eg_ext_pipelined.sh,
            generic_gcc_regression_simple_eg.sh,
          ]
        args:
          [
            "",
            "-c=--speculative-sdc-scheduling --skip_list 20040705-1,20040705-2,20040629-1,memset-3",
          ]
        exclude:
          - compiler: I386_GCC49
            script: generic_gcc_regression_simple_bambu_pretty_print.sh --skip_list 20071029-1
          - compiler: I386_GCC49
            script: generic_gcc_regression_simple_eg_ext_pipelined.sh
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Download Bambu AppImage
        uses: ./.github/actions/storage-download
        with:
          name: ${{needs.build.outputs.package-name}}
          storage-url: "${{env.storage-url}}"
          username: "${{env.storage-user}}"
          password: "${{env.storage-token}}"
      - name: Setup binaries
        id: setup
        shell: bash
        run: |
          mkdir bin
          ln -s $PWD/*.AppImage bin/bambu
          ln -s $PWD/*.AppImage bin/spider
          echo "::set-output name=local-bin::$PWD/bin"
      - name: Generate out name
        id: get
        shell: bash
        run: |
          COMPILER="$(echo '${{matrix.compiler}}' | cut -d' ' -f1 | sed -r 's/I386_//g' | tr '[:upper:]' '[:lower:]')"
          SCRIPT="$(echo '${{matrix.script}}' | cut -d' ' -f1 | sed -r 's/(\.sh|generic_gcc_)//g')"
          OUTNAME="${COMPILER}_${SCRIPT}"
          if [[ "${{matrix.args}}" = *-c=--speculative-sdc-scheduling* ]]; then
            OUTNAME+="_sdc"
          fi
          echo "::set-output name=outname::$OUTNAME"
      - name: Launch test suite
        id: suite
        shell: bash
        run: |
          export PATH=${{steps.setup.outputs.local-bin}}:$PATH
          mkdir ${{env.report-dir}}
          out_dir="$PWD/${{env.report-dir}}"
          echo "::set-output name=test-reports-dir::$out_dir"
          ./panda_regressions/hls/${{matrix.script}} --returnfail --junitdir="$out_dir" --csv="$out_dir/perf.csv" --table="$out_dir/perf.tex" -c=--compiler=${{matrix.compiler}} ${{env.args}} ${{matrix.args}}
      - name: Upload test reports
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{steps.get.outputs.outname}}
          path: ${{steps.suite.outputs.test-reports-dir}}

  gcc_regression_simple-vhdl:
    needs: [build, simulate-all]
    runs-on: [self-hosted, long, mentor]
    env:
      basename: regression_simple-vhdl
      args: -c=--simulator=MODELSIM -c=-wH
    strategy:
      max-parallel: 2
      fail-fast: false
      matrix:
        compiler:
          [
            I386_GCC45 --skip_list 20071202-1,
            I386_GCC46,
            I386_GCC47,
            I386_GCC48,
            I386_GCC49,
            I386_GCC5,
            I386_GCC6,
            I386_GCC7,
            I386_GCC8,
          ]
        script:
          [
            generic_gcc_regression_simple_bambu_pretty_print.sh --skip_list 20071029-1,
            generic_gcc_regression_simple_bambu.sh,
            generic_gcc_regression_simple_eg_ext_pipelined.sh,
            generic_gcc_regression_simple_eg.sh,
          ]
        exclude:
          - compiler: I386_GCC7
            script: generic_gcc_regression_simple_bambu.sh
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Download Bambu AppImage
        uses: ./.github/actions/storage-download
        with:
          name: ${{needs.build.outputs.package-name}}
          storage-url: "${{env.storage-url}}"
          username: "${{env.storage-user}}"
          password: "${{env.storage-token}}"
      - name: Setup binaries
        id: setup
        shell: bash
        run: |
          mkdir bin
          ln -s $PWD/*.AppImage bin/bambu
          ln -s $PWD/*.AppImage bin/spider
          echo "::set-output name=local-bin::$PWD/bin"
      - name: Generate out name
        id: get
        shell: bash
        run: |
          COMPILER="$(echo '${{matrix.compiler}}' | cut -d' ' -f1 | sed -r 's/I386_//g' | tr '[:upper:]' '[:lower:]')"
          SCRIPT="$(echo '${{matrix.script}}' | cut -d' ' -f1 | sed -r 's/(\.sh|generic_gcc_)//g')"
          OUTNAME="${COMPILER}_${SCRIPT}_vhdl"
          echo "::set-output name=outname::$OUTNAME"
      - name: Launch test suite
        id: suite
        shell: bash
        run: |
          export PATH=${{steps.setup.outputs.local-bin}}:$PATH
          mkdir ${{env.report-dir}}
          out_dir="$PWD/${{env.report-dir}}"
          echo "::set-output name=test-reports-dir::$out_dir"
          ./panda_regressions/hls/${{matrix.script}} --returnfail --junitdir="$out_dir" --csv="$out_dir/perf.csv" --table="$out_dir/perf.tex" -c=--compiler=${{matrix.compiler}} ${{env.args}} ${{matrix.args}}
      - name: Upload test reports
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{steps.get.outputs.outname}}
          path: ${{steps.suite.outputs.test-reports-dir}}

  simulate-all:
    needs: [build]
    runs-on: [self-hosted, long, mentor]
    env:
      args: -c=--simulator=MODELSIM
    strategy:
      max-parallel: 2
      fail-fast: false
      matrix:
        include:
          - outname: all_gcc_softfloat-tests
            script: all_gcc_softfloat-tests.sh
          - outname: all_gcc_CHStone-frontend
            script: all_gcc_CHStone-frontend.sh
          - outname: all_gcc_softfloat-tests-vhdl
            script: all_gcc_softfloat-tests.sh -c=-wH
          - outname: all_gcc_CHStone-frontend-vhdl
            script: all_gcc_CHStone-frontend.sh -c=-wH
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Download Bambu AppImage
        uses: ./.github/actions/storage-download
        with:
          name: ${{needs.build.outputs.package-name}}
          storage-url: "${{env.storage-url}}"
          username: "${{env.storage-user}}"
          password: "${{env.storage-token}}"
      - name: Setup binaries
        id: setup
        shell: bash
        run: |
          mkdir bin
          ln -s $PWD/*.AppImage bin/bambu
          ln -s $PWD/*.AppImage bin/spider
          echo "::set-output name=local-bin::$PWD/bin"
      - name: Launch test suite
        id: suite
        shell: bash
        run: |
          export PATH=${{steps.setup.outputs.local-bin}}:$PATH
          mkdir ${{env.report-dir}}
          out_dir="$PWD/${{env.report-dir}}"
          echo "::set-output name=test-reports-dir::$out_dir"
          ./panda_regressions/hls/${{matrix.script}} --returnfail --junitdir="$out_dir" --csv="$out_dir/perf.csv" --table="$out_dir/perf.tex" ${{env.args}} ${{matrix.args}}
      - name: Upload test reports
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{matrix.outname}}
          path: ${{steps.suite.outputs.test-reports-dir}}

  libm-all-vhdl:
    needs: [build, simulate-all, gcc_regression_simple-vhdl]
    runs-on: [self-hosted, long, mentor]
    strategy:
      fail-fast: false
      max-parallel: 2
      matrix:
        compiler:
          [
            I386_GCC45,
            I386_GCC46,
            I386_GCC47,
            I386_GCC48,
            I386_GCC49,
            I386_GCC5,
            I386_GCC6,
            I386_GCC7,
            I386_GCC8,
          ]
    env:
      script: generic_libm-tests.sh
      args: -c=--simulator=MODELSIM -c=-wH
      basename: libm-vhdl
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Download Bambu AppImage
        uses: ./.github/actions/storage-download
        with:
          name: ${{needs.build.outputs.package-name}}
          storage-url: "${{env.storage-url}}"
          username: "${{env.storage-user}}"
          password: "${{env.storage-token}}"
      - name: Setup binaries
        id: setup
        shell: bash
        run: |
          mkdir bin
          ln -s $PWD/*.AppImage bin/bambu
          ln -s $PWD/*.AppImage bin/spider
          echo "::set-output name=local-bin::$PWD/bin"
      - name: Generate out name
        id: get
        shell: bash
        run: |
          COMPILER="$(echo '${{matrix.compiler}}' | cut -d' ' -f1 | sed -r 's/I386_//g' | tr '[:upper:]' '[:lower:]')"
          OUTNAME="${COMPILER}_${{env.basename}}"
          echo "::set-output name=outname::$OUTNAME"
      - name: Launch test suite
        id: suite
        shell: bash
        run: |
          export PATH=${{steps.setup.outputs.local-bin}}:$PATH
          mkdir ${{env.report-dir}}
          out_dir="$PWD/${{env.report-dir}}"
          echo "::set-output name=test-reports-dir::$out_dir"
          ./panda_regressions/hls/${{env.script}} --returnfail --junitdir="$out_dir" --csv="$out_dir/perf.csv" --table="$out_dir/perf.tex" -c=--compiler=${{matrix.compiler}} ${{env.args}} ${{matrix.args}}
      - name: Upload test reports
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{steps.get.outputs.outname}}
          path: ${{steps.suite.outputs.test-reports-dir}}

  libm-all:
    needs: [build, simulate-all]
    runs-on: [self-hosted, long]
    strategy:
      fail-fast: false
      matrix:
        compiler:
          [
            I386_GCC45,
            I386_GCC46,
            I386_GCC47,
            I386_GCC48,
            I386_GCC49,
            I386_GCC5,
            I386_GCC6,
            I386_GCC7,
            I386_GCC8,
          ]
        args: ["", "-c=--speculative-sdc-scheduling"]
    env:
      script: generic_libm-tests.sh
      args: -c=--simulator=VERILATOR -t150m
      basename: libm
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Download Bambu AppImage
        uses: ./.github/actions/storage-download
        with:
          name: ${{needs.build.outputs.package-name}}
          storage-url: "${{env.storage-url}}"
          username: "${{env.storage-user}}"
          password: "${{env.storage-token}}"
      - name: Setup binaries
        id: setup
        shell: bash
        run: |
          mkdir bin
          ln -s $PWD/*.AppImage bin/bambu
          ln -s $PWD/*.AppImage bin/spider
          echo "::set-output name=local-bin::$PWD/bin"
      - name: Generate out name
        id: get
        shell: bash
        run: |
          COMPILER="$(echo '${{matrix.compiler}}' | cut -d' ' -f1 | sed -r 's/I386_//g' | tr '[:upper:]' '[:lower:]')"
          OUTNAME="${COMPILER}"
          if [[ "${{matrix.args}}" = *-c=--speculative-sdc-scheduling* ]]; then
            OUTNAME+="_sdc"
          fi
          OUTNAME+="_${{env.basename}}"
          echo "::set-output name=outname::$OUTNAME"
      - name: Launch test suite
        id: suite
        shell: bash
        run: |
          export PATH=${{steps.setup.outputs.local-bin}}:$PATH
          mkdir ${{env.report-dir}}
          out_dir="$PWD/${{env.report-dir}}"
          echo "::set-output name=test-reports-dir::$out_dir"
          ./panda_regressions/hls/${{env.script}} --returnfail --junitdir="$out_dir" --csv="$out_dir/perf.csv" --table="$out_dir/perf.tex" -c=--compiler=${{matrix.compiler}} ${{env.args}} ${{matrix.args}}
      - name: Upload test reports
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{steps.get.outputs.outname}}
          path: ${{steps.suite.outputs.test-reports-dir}}

  examples:
    needs: [build]
    uses: ./.github/workflows/examples.yml
    with:
      package-name: ${{needs.build.outputs.package-name}}
      test-compiler: I386_GCC49
    secrets:
      CI_STORAGE_URL: ${{env.storage-url}}
      CI_STORAGE_USER: ${{env.storage-user}}
      CI_STORAGE_TOKEN: ${{env.storage-token}}
